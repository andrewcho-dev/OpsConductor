# =============================================================================
# OPSCONDUCTOR - PRODUCTION OVERRIDE
# =============================================================================
# Production-optimized configuration with proper nginx gateway and static frontend
# Use with: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up

version: '3.8'

services:
  # =============================================================================
  # NGINX - PRODUCTION GATEWAY (replaces development nginx)
  # =============================================================================
  nginx:
    image: nginx:alpine
    container_name: opsconductor-nginx-production
    command: sh -c "apk add --no-cache curl && nginx -g 'daemon off;'"
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx-production.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/proxy_params:/etc/nginx/proxy_params:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      # Mount built frontend files
      - frontend-build:/usr/share/nginx/html:ro
    networks:
      - opsconductor-network
    depends_on:
      frontend-builder:
        condition: service_completed_successfully
      auth-service:
        condition: service_healthy
      user-service:
        condition: service_healthy
      targets-service:
        condition: service_healthy
      jobs-service:
        condition: service_healthy
      execution-service:
        condition: service_healthy
      audit-events-service:
        condition: service_healthy
      notification-service:
        condition: service_healthy
      target-discovery-service:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.opsconductor.rule=Host(`localhost`)"
      - "traefik.http.routers.opsconductor.tls=true"

  # =============================================================================
  # FRONTEND BUILDER - Build React app to static files
  # =============================================================================
  frontend-builder:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      target: build
    container_name: opsconductor-frontend-builder
    volumes:
      - frontend-build:/app/build
    environment:
      - NODE_ENV=production
      - GENERATE_SOURCEMAP=false
      - REACT_APP_API_URL=/api/v1
      - REACT_APP_AUTH_URL=/api/v1/auth
      - REACT_APP_USER_URL=/api/v1/users
      - REACT_APP_WS_URL=/ws
      - REACT_APP_STORAGE_URL=/storage
    profiles:
      - build

  # =============================================================================
  # REMOVE DEVELOPMENT FRONTEND SERVICE
  # =============================================================================
  frontend:
    profiles:
      - disabled  # Disable the development frontend service

  # =============================================================================
  # API GATEWAY - REMOVE DIRECT EXPOSURE
  # =============================================================================
  api-gateway:
    # Remove direct port exposure - access only through main nginx
    ports: []
    
  # =============================================================================
  # BACKEND - LEGACY SERVICE (DISABLED IN PRODUCTION)
  # =============================================================================
  backend:
    profiles:
      - disabled  # Disable legacy backend service

  celery-worker:
    profiles:
      - disabled  # Disable legacy celery worker

  scheduler:
    profiles:
      - disabled  # Disable legacy scheduler

  # =============================================================================
  # MINIO - PRODUCTION CONFIGURATION
  # =============================================================================
  minio:
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-opsconductor}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-opsconductor_minio_2024}
      - MINIO_BROWSER_REDIRECT_URL=https://${EXTERNAL_DOMAIN:-localhost}/storage/console
      - MINIO_SERVER_URL=https://${EXTERNAL_DOMAIN:-localhost}/storage
    # Remove direct port exposure - access only through nginx
    ports: []
    labels:
      - "opsconductor.service=storage"
      - "opsconductor.type=backend"

  # =============================================================================
  # MICROSERVICES - REMOVE DIRECT PORT EXPOSURE
  # =============================================================================
  auth-service:
    ports: []  # Access only through nginx gateway
    
  user-service:
    ports: []  # Access only through nginx gateway
    
  targets-service:
    ports: []  # Access only through nginx gateway
    
  jobs-service:
    ports: []  # Access only through nginx gateway
    
  execution-service:
    ports: []  # Access only through nginx gateway
    environment:
      # Override MinIO endpoint to use internal networking
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_BROWSER_REDIRECT=false
    
  audit-events-service:
    ports: []  # Access only through nginx gateway
    
  notification-service:
    ports: []  # Access only through nginx gateway
    
  target-discovery-service:
    ports: []  # Access only through nginx gateway
    
  job-scheduling-service:
    ports: []  # Access only through nginx gateway
    
  job-management-service:
    ports: []  # Access only through nginx gateway

volumes:
  # Volume for built frontend static files
  frontend-build:
    driver: local

networks:
  opsconductor-network:
    external: false
    driver: bridge
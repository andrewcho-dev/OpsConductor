# =============================================================================
# INTERNAL API GATEWAY - MICROSERVICES MESH
# =============================================================================
# Optimized for service-to-service communication and internal routing
# This nginx instance focuses ONLY on microservices routing

events {
    worker_connections 2048;
    multi_accept on;
    use epoll;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/json;

    # Logging optimized for API traffic
    log_format api_log '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent $request_time $upstream_response_time '
                      '"$http_user_agent" "$http_x_forwarded_for" '
                      'upstream="$upstream_addr" service="$upstream_cache_status"';
    
    access_log /var/log/nginx/api_access.log api_log;
    error_log /var/log/nginx/api_error.log warn;

    # API-optimized settings
    sendfile off;  # Better for API responses
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 30;
    client_max_body_size 50M;
    client_body_buffer_size 128k;

    # NO gzip for APIs (handled by external nginx)
    gzip off;

    # Service discovery and health monitoring
    resolver 127.0.0.11 valid=5s;
    
    # Rate limiting for internal services
    limit_req_zone $binary_remote_addr zone=internal_api:10m rate=50r/s;
    limit_req_zone $binary_remote_addr zone=internal_auth:10m rate=20r/s;

    # =================================================================
    # UPSTREAM DEFINITIONS - Health Monitoring + Load Balancing
    # =================================================================
    
    upstream auth-service {
        server auth-service:8000 max_fails=2 fail_timeout=10s weight=1;
        keepalive 32;
    }

    upstream user-service {
        server user-service:8000 max_fails=2 fail_timeout=10s weight=1;
        keepalive 32;
    }

    upstream targets-service {
        server targets-service:8000 max_fails=2 fail_timeout=10s weight=1;
        keepalive 32;
    }

    upstream jobs-service {
        server jobs-service:8000 max_fails=2 fail_timeout=10s weight=1;
        keepalive 32;
    }

    upstream execution-service {
        server execution-service:8000 max_fails=2 fail_timeout=10s weight=1;
        keepalive 32;
    }

    upstream audit-events-service {
        server audit-events-service:8000 max_fails=2 fail_timeout=10s weight=1;
        keepalive 32;
    }

    upstream notification-service {
        server notification-service:8000 max_fails=2 fail_timeout=10s weight=1;
        keepalive 32;
    }

    upstream target-discovery-service {
        server target-discovery-service:8000 max_fails=2 fail_timeout=10s weight=1;
        keepalive 32;
    }

    upstream job-scheduling-service {
        server job-scheduling-service:8000 max_fails=2 fail_timeout=10s weight=1;
        keepalive 32;
    }

    upstream job-management-service {
        server job-management-service:8000 max_fails=2 fail_timeout=10s weight=1;
        keepalive 32;
    }

    # =================================================================
    # INTERNAL API GATEWAY SERVER
    # =================================================================
    server {
        listen 80;
        server_name internal-api-gateway;

        # API-specific headers
        add_header X-API-Gateway "OpsConductor-Internal" always;
        add_header X-Service-Mesh "nginx" always;

        # =============================================================
        # HEALTH AND MONITORING ENDPOINTS
        # =============================================================
        
        # Overall gateway health
        location /health {
            access_log off;
            return 200 '{"status":"healthy","gateway":"internal","services":10}';
            add_header Content-Type application/json;
        }

        # Service health aggregation
        location /health/all {
            access_log off;
            content_by_lua_block {
                -- This would require lua module for advanced health checking
                -- For now, return basic status
                ngx.header.content_type = "application/json"
                ngx.say('{"status":"healthy","timestamp":"' .. ngx.utctime() .. '"}')
            }
        }

        # =============================================================
        # AUTHENTICATION SERVICE
        # =============================================================
        location /api/v1/auth/ {
            limit_req zone=internal_auth burst=30 nodelay;
            
            proxy_pass http://auth-service/api/v1/auth/;
            include /etc/nginx/internal_proxy_params;
            
            # Auth-specific timeouts (faster)
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # =============================================================
        # USER MANAGEMENT SERVICE  
        # =============================================================
        location /api/v1/users/ {
            limit_req zone=internal_api burst=40 nodelay;
            
            proxy_pass http://user-service/api/v1/users/;
            include /etc/nginx/internal_proxy_params;
        }

        # =============================================================
        # TARGETS MANAGEMENT SERVICE
        # =============================================================
        location /api/v1/targets/ {
            limit_req zone=internal_api burst=40 nodelay;
            
            proxy_pass http://targets-service/api/v1/targets/;
            include /etc/nginx/internal_proxy_params;
        }

        # =============================================================
        # JOBS MANAGEMENT SERVICE
        # =============================================================
        location /api/v1/jobs/ {
            limit_req zone=internal_api burst=50 nodelay;
            
            proxy_pass http://jobs-service/api/v1/jobs/;
            include /etc/nginx/internal_proxy_params;
        }

        # =============================================================
        # EXECUTION SERVICE (High throughput)
        # =============================================================
        location /api/v1/executions/ {
            limit_req zone=internal_api burst=100 nodelay;
            
            proxy_pass http://execution-service/api/v1/executions/;
            include /etc/nginx/internal_proxy_params;
            
            # Execution-specific optimizations
            proxy_buffering off;  # Stream responses
            proxy_connect_timeout 30s;
            proxy_send_timeout 300s;  # Long-running jobs
            proxy_read_timeout 300s;
        }

        # =============================================================
        # AUDIT EVENTS SERVICE
        # =============================================================
        location /api/v1/audit/ {
            limit_req zone=internal_api burst=30 nodelay;
            
            proxy_pass http://audit-events-service/api/v1/audit/;
            include /etc/nginx/internal_proxy_params;
        }

        # =============================================================
        # NOTIFICATION SERVICE
        # =============================================================
        location /api/v1/notifications/ {
            limit_req zone=internal_api burst=30 nodelay;
            
            proxy_pass http://notification-service/api/v1/notifications/;
            include /etc/nginx/internal_proxy_params;
        }

        # =============================================================
        # TARGET DISCOVERY SERVICE
        # =============================================================
        location /api/v1/discovery/ {
            limit_req zone=internal_api burst=20 nodelay;
            
            proxy_pass http://target-discovery-service/api/v1/discovery/;
            include /etc/nginx/internal_proxy_params;
            
            # Discovery can be slow
            proxy_connect_timeout 60s;
            proxy_read_timeout 120s;
        }

        # =============================================================
        # JOB SCHEDULING SERVICE
        # =============================================================
        location /api/v1/schedules/ {
            limit_req zone=internal_api burst=25 nodelay;
            
            proxy_pass http://job-scheduling-service/api/v1/schedules/;
            include /etc/nginx/internal_proxy_params;
        }

        # =============================================================
        # JOB MANAGEMENT SERVICE (Orchestration)
        # =============================================================
        location /api/v1/management/ {
            limit_req zone=internal_api burst=40 nodelay;
            
            proxy_pass http://job-management-service/api/v1/management/;
            include /etc/nginx/internal_proxy_params;
        }

        # =============================================================
        # SERVICE DISCOVERY ENDPOINT
        # =============================================================
        location /api/v1/services {
            access_log off;
            return 200 '{
                "services": {
                    "auth": "http://auth-service:8000",
                    "users": "http://user-service:8000", 
                    "targets": "http://targets-service:8000",
                    "jobs": "http://jobs-service:8000",
                    "executions": "http://execution-service:8000",
                    "audit": "http://audit-events-service:8000",
                    "notifications": "http://notification-service:8000",
                    "discovery": "http://target-discovery-service:8000",
                    "scheduling": "http://job-scheduling-service:8000",
                    "management": "http://job-management-service:8000"
                },
                "gateway": "internal",
                "version": "1.0"
            }';
            add_header Content-Type application/json;
        }

        # =============================================================
        # METRICS AND MONITORING
        # =============================================================
        location /metrics {
            access_log off;
            # This could be extended with nginx-prometheus-exporter
            return 200 "# Internal API Gateway Metrics\n# TODO: Implement Prometheus metrics\n";
            add_header Content-Type text/plain;
        }

        # =============================================================
        # DEFAULT - REJECT UNKNOWN PATHS
        # =============================================================
        location / {
            return 404 '{"error":"Not Found","gateway":"internal","message":"API endpoint not found"}';
            add_header Content-Type application/json;
        }
    }
}
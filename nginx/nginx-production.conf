# =============================================================================
# OPSCONDUCTOR - PRODUCTION NGINX CONFIGURATION
# =============================================================================
# Complete reverse proxy with SSL termination, static frontend serving, 
# and microservices routing with object storage support
# IMPORTANT: Uses ONLY relative paths - NO hardcoded IPs

events {
    worker_connections 2048;
    multi_accept on;
    use epoll;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logging with detailed information
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    '$request_time $upstream_response_time';
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 100M;
    client_body_buffer_size 128k;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types 
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json
        application/xml
        image/svg+xml
        font/woff
        font/woff2;

    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=uploads:10m rate=2r/s;
    limit_req_zone $binary_remote_addr zone=downloads:10m rate=20r/s;

    # DNS resolver for dynamic service discovery
    resolver 127.0.0.11 valid=10s;
    
    # Security headers (applied to all responses)
    add_header X-Frame-Options SAMEORIGIN always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "camera=(), microphone=(), geolocation=()" always;

    # Upstream services - All microservices with health checks
    upstream auth-service {
        server auth-service:8000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream user-service {
        server user-service:8000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream targets-service {
        server targets-service:8000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream jobs-service {
        server jobs-service:8000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream execution-service {
        server execution-service:8000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream audit-events-service {
        server audit-events-service:8000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream notification-service {
        server notification-service:8000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream target-discovery-service {
        server target-discovery-service:8000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream job-scheduling-service {
        server job-scheduling-service:8000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream job-management-service {
        server job-management-service:8000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream minio {
        server minio:9000 max_fails=2 fail_timeout=10s;
        keepalive 16;
    }

    # =============================================================================
    # HTTP SERVER - REDIRECT ALL TO HTTPS
    # =============================================================================
    server {
        listen 80 default_server;
        server_name _;

        # Health check endpoint (only exception to HTTPS redirect)
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Redirect all HTTP to HTTPS (except health check)
        location / {
            return 301 https://$server_name$request_uri;
        }
    }

    # =============================================================================
    # HTTPS SERVER - MAIN APPLICATION
    # =============================================================================
    server {
        listen 443 ssl http2 default_server;
        server_name _;

        # SSL Configuration
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-CHACHA20-POLY1305;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # HTTPS Security headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # =================================================================
        # MICROSERVICES API ROUTES (v1) - All relative paths
        # =================================================================
        
        # =================================================================
        # OPTION 1: DIRECT TO MICROSERVICES (Current Default)
        # =================================================================
        
        # Authentication Service
        location /api/v1/auth/ {
            limit_req zone=auth burst=10 nodelay;
            proxy_pass http://auth-service/api/v1/auth/;
            include /etc/nginx/proxy_params;
        }
        
        # =================================================================
        # OPTION 2: ROUTE THROUGH INTERNAL API GATEWAY (Uncomment to use)
        # =================================================================
        # location /api/v1/ {
        #     limit_req zone=api burst=50 nodelay;
        #     proxy_pass http://api-gateway/api/v1/;
        #     include /etc/nginx/proxy_params;
        # }

        # User Management Service  
        location /api/v1/users/ {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://user-service/api/v1/users/;
            include /etc/nginx/proxy_params;
        }

        # Targets Management Service
        location /api/v1/targets/ {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://targets-service/api/v1/targets/;
            include /etc/nginx/proxy_params;
        }

        # Jobs Management Service
        location /api/v1/jobs/ {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://jobs-service/api/v1/jobs/;
            include /etc/nginx/proxy_params;
        }

        # Job Execution Service (with object storage support)
        location /api/v1/executions/ {
            limit_req zone=api burst=30 nodelay;
            proxy_pass http://execution-service/api/v1/executions/;
            include /etc/nginx/proxy_params;
            # Extended timeouts for long-running executions
            proxy_connect_timeout 90s;
            proxy_send_timeout 90s;
            proxy_read_timeout 300s;
        }

        # Audit Events Service
        location /api/v1/audit/ {
            limit_req zone=api burst=15 nodelay;
            proxy_pass http://audit-events-service/api/v1/audit/;
            include /etc/nginx/proxy_params;
        }

        # Notification Service
        location /api/v1/notifications/ {
            limit_req zone=api burst=15 nodelay;
            proxy_pass http://notification-service/api/v1/notifications/;
            include /etc/nginx/proxy_params;
        }

        # Target Discovery Service
        location /api/v1/discovery/ {
            limit_req zone=api burst=10 nodelay;
            proxy_pass http://target-discovery-service/api/v1/discovery/;
            include /etc/nginx/proxy_params;
        }

        # Job Scheduling Service
        location /api/v1/schedules/ {
            limit_req zone=api burst=15 nodelay;
            proxy_pass http://job-scheduling-service/api/v1/schedules/;
            include /etc/nginx/proxy_params;
        }

        # Job Management Service (orchestration)
        location /api/v1/management/ {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://job-management-service/api/v1/management/;
            include /etc/nginx/proxy_params;
        }

        # =================================================================
        # OBJECT STORAGE ACCESS - MinIO Integration
        # =================================================================
        
        # Direct object storage access (for downloads with signed URLs)
        location /storage/ {
            limit_req zone=downloads burst=50 nodelay;
            
            # Remove /storage prefix and pass to MinIO
            rewrite ^/storage/(.*)$ /$1 break;
            proxy_pass http://minio;
            
            # MinIO-specific headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Caching for static objects
            proxy_cache_valid 200 1h;
            add_header Cache-Control "public, max-age=3600";
            
            # CORS for direct access
            add_header Access-Control-Allow-Origin "*";
            add_header Access-Control-Allow-Methods "GET, OPTIONS";
            add_header Access-Control-Allow-Headers "Range, Content-Type";
            add_header Access-Control-Expose-Headers "Content-Range, Content-Length, Accept-Ranges";
            
            if ($request_method = 'OPTIONS') {
                return 204;
            }
        }

        # Object storage management API (for uploads, bucket operations)
        location /api/v1/storage/ {
            limit_req zone=uploads burst=5 nodelay;
            proxy_pass http://execution-service/api/v1/storage/;
            include /etc/nginx/proxy_params;
            # Extended timeout for uploads
            proxy_request_buffering off;
            proxy_connect_timeout 60s;
            proxy_send_timeout 600s;
            proxy_read_timeout 600s;
        }

        # =================================================================
        # HEALTH CHECK ENDPOINTS - Service monitoring
        # =================================================================
        location /health/services {
            access_log off;
            return 200 '{"status":"healthy","services":["auth","users","targets","jobs","executions","audit","notifications","discovery","scheduling","management","storage"]}';
            add_header Content-Type application/json;
        }

        # Individual service health checks
        location ~ ^/health/(auth|users|targets|jobs|executions|audit|notifications|discovery|scheduling|management)$ {
            access_log off;
            set $service $1;
            
            # Map service names to upstreams
            set $upstream "";
            if ($service = "auth") { set $upstream "auth-service"; }
            if ($service = "users") { set $upstream "user-service"; }
            if ($service = "targets") { set $upstream "targets-service"; }
            if ($service = "jobs") { set $upstream "jobs-service"; }
            if ($service = "executions") { set $upstream "execution-service"; }
            if ($service = "audit") { set $upstream "audit-events-service"; }
            if ($service = "notifications") { set $upstream "notification-service"; }
            if ($service = "discovery") { set $upstream "target-discovery-service"; }
            if ($service = "scheduling") { set $upstream "job-scheduling-service"; }
            if ($service = "management") { set $upstream "job-management-service"; }
            
            proxy_pass http://$upstream/health;
        }

        # =================================================================
        # FRONTEND - PRODUCTION STATIC FILES
        # =================================================================
        
        # Frontend static assets with aggressive caching
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|map)$ {
            root /usr/share/nginx/html;
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary Accept-Encoding;
            
            # Fallback to index if file not found (for React routing)
            try_files $uri $uri/ @fallback;
        }

        # API documentation (if exists)
        location /docs {
            root /usr/share/nginx/html;
            try_files $uri $uri/ @fallback;
        }

        # Frontend application (React Router support)
        location / {
            root /usr/share/nginx/html;
            try_files $uri $uri/ @fallback;
            
            # Security for HTML files
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }

        # Fallback for React Router (SPA routing)
        location @fallback {
            root /usr/share/nginx/html;
            try_files /index.html =404;
            
            # Security headers for HTML
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }

        # =================================================================
        # SECURITY - Block sensitive paths
        # =================================================================
        
        # Block access to hidden files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }

        # Block access to sensitive files
        location ~* \.(env|config|log|sql|md|bak)$ {
            deny all;
            access_log off;
            log_not_found off;
        }

        # Block access to version control
        location ~* /\.(git|svn|hg) {
            deny all;
            access_log off;
            log_not_found off;
        }
    }
}
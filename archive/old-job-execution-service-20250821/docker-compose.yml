name: job-execution-service

services:
  # =============================================================================
  # JOB DATABASE - PostgreSQL
  # =============================================================================
  job-db:
    image: postgres:15-alpine
    container_name: job-execution-db
    environment:
      POSTGRES_DB: ${JOB_POSTGRES_DB:-job_execution_db}
      POSTGRES_USER: ${JOB_POSTGRES_USER:-job_user}
      POSTGRES_PASSWORD: ${JOB_POSTGRES_PASSWORD:-job_password}
    volumes:
      - job_postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - job-network
      - opsconductor-network  # Connect to main network
    ports:
      - "5433:5432"  # Different port to avoid conflicts
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${JOB_POSTGRES_USER:-job_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =============================================================================
  # JOB REDIS - Queue and Cache
  # =============================================================================
  job-redis:
    image: redis:7-alpine
    container_name: job-execution-redis
    command: redis-server --appendonly yes
    volumes:
      - job_redis_data:/data
    networks:
      - job-network
      - opsconductor-network  # Connect to main network
    ports:
      - "6380:6379"  # Different port to avoid conflicts
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =============================================================================
  # JOB API - FastAPI Service
  # =============================================================================
  job-api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    container_name: job-execution-api
    environment:
      # Database
      - DATABASE_URL=postgresql://${JOB_POSTGRES_USER:-job_user}:${JOB_POSTGRES_PASSWORD:-job_password}@job-db:5432/${JOB_POSTGRES_DB:-job_execution_db}
      
      # Redis
      - REDIS_URL=redis://job-redis:6379/0
      
      # External Services
      - TARGET_SERVICE_URL=${TARGET_SERVICE_URL:-http://backend:8000}
      - USER_SERVICE_URL=${USER_SERVICE_URL:-http://user-service:8000}
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL:-http://auth-service:8000}
      - NOTIFICATION_SERVICE_URL=${NOTIFICATION_SERVICE_URL:-http://backend:8000}
      
      # JWT Configuration
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ALGORITHM=${JWT_ALGORITHM:-HS256}
      
      # Execution Configuration
      - MAX_CONCURRENT_TARGETS=${MAX_CONCURRENT_TARGETS:-10}
      - CONNECTION_TIMEOUT=${CONNECTION_TIMEOUT:-30}
      - COMMAND_TIMEOUT=${COMMAND_TIMEOUT:-300}
      - ENABLE_RETRY=${ENABLE_RETRY:-true}
      - MAX_RETRIES=${MAX_RETRIES:-3}
      - RETRY_BACKOFF_BASE=${RETRY_BACKOFF_BASE:-2}
      
      # Service Configuration
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DEBUG=${DEBUG:-true}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./app:/app/app
      - ./logs:/app/logs
    networks:
      - job-network
      - opsconductor-network  # Connect to main network
    ports:
      - "8003:8000"  # Job service on port 8003
    depends_on:
      job-db:
        condition: service_healthy
      job-redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "--max-time", "5", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # JOB WORKER - Celery Workers
  # =============================================================================
  job-worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    container_name: job-execution-worker
    command: celery -A app.core.celery_app worker --loglevel=info --concurrency=4
    environment:
      # Database
      - DATABASE_URL=postgresql://${JOB_POSTGRES_USER:-job_user}:${JOB_POSTGRES_PASSWORD:-job_password}@job-db:5432/${JOB_POSTGRES_DB:-job_execution_db}
      
      # Redis
      - REDIS_URL=redis://job-redis:6379/0
      
      # External Services
      - TARGET_SERVICE_URL=${TARGET_SERVICE_URL:-http://backend:8000}
      - USER_SERVICE_URL=${USER_SERVICE_URL:-http://user-service:8000}
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL:-http://auth-service:8000}
      - NOTIFICATION_SERVICE_URL=${NOTIFICATION_SERVICE_URL:-http://backend:8000}
      
      # JWT Configuration
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ALGORITHM=${JWT_ALGORITHM:-HS256}
      
      # Execution Configuration
      - MAX_CONCURRENT_TARGETS=${MAX_CONCURRENT_TARGETS:-10}
      - CONNECTION_TIMEOUT=${CONNECTION_TIMEOUT:-30}
      - COMMAND_TIMEOUT=${COMMAND_TIMEOUT:-300}
      - ENABLE_RETRY=${ENABLE_RETRY:-true}
      - MAX_RETRIES=${MAX_RETRIES:-3}
      - RETRY_BACKOFF_BASE=${RETRY_BACKOFF_BASE:-2}
      
      # Service Configuration
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./app:/app/app
      - ./logs:/app/logs
    networks:
      - job-network
      - opsconductor-network  # Connect to main network
    depends_on:
      job-db:
        condition: service_healthy
      job-redis:
        condition: service_healthy
      job-api:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "celery -A app.core.celery_app inspect ping"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 60s

  # =============================================================================
  # JOB SCHEDULER - Celery Beat
  # =============================================================================
  job-scheduler:
    build:
      context: .
      dockerfile: docker/Dockerfile.scheduler
    container_name: job-execution-scheduler
    command: celery -A app.core.celery_app beat --loglevel=info
    environment:
      # Database
      - DATABASE_URL=postgresql://${JOB_POSTGRES_USER:-job_user}:${JOB_POSTGRES_PASSWORD:-job_password}@job-db:5432/${JOB_POSTGRES_DB:-job_execution_db}
      
      # Redis
      - REDIS_URL=redis://job-redis:6379/0
      
      # External Services
      - TARGET_SERVICE_URL=${TARGET_SERVICE_URL:-http://backend:8000}
      - USER_SERVICE_URL=${USER_SERVICE_URL:-http://user-service:8000}
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL:-http://auth-service:8000}
      - NOTIFICATION_SERVICE_URL=${NOTIFICATION_SERVICE_URL:-http://backend:8000}
      
      # JWT Configuration
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ALGORITHM=${JWT_ALGORITHM:-HS256}
      
      # Service Configuration
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./app:/app/app
      - ./logs:/app/logs
    networks:
      - job-network
      - opsconductor-network  # Connect to main network
    depends_on:
      job-db:
        condition: service_healthy
      job-redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep -v grep | grep -q 'celery -A app.core.celery_app beat' || exit 1"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 60s

# =============================================================================
# NETWORKS & VOLUMES
# =============================================================================
networks:
  job-network:
    driver: bridge
  opsconductor-network:
    external: true  # Connect to existing OpsConductor network

volumes:
  job_postgres_data:
    driver: local
  job_redis_data:
    driver: local
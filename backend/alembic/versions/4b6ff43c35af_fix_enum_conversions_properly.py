"""fix_enum_conversions_properly

Revision ID: 4b6ff43c35af
Revises: 2d9a04ef6730
Create Date: 2025-08-17 04:24:01.455342

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '4b6ff43c35af'
down_revision: Union[str, None] = '2d9a04ef6730'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('alert_logs_alert_serial_key', 'alert_logs', type_='unique')
    op.drop_constraint('alert_logs_alert_uuid_key', 'alert_logs', type_='unique')
    op.drop_index('idx_alert_logs_alert_rule_id', table_name='alert_logs')
    op.create_index(op.f('ix_alert_logs_id'), 'alert_logs', ['id'], unique=False)
    op.drop_constraint('alert_logs_alert_rule_id_fkey', 'alert_logs', type_='foreignkey')
    op.create_foreign_key(None, 'alert_logs', 'alert_rules', ['alert_rule_id'], ['id'])
    op.drop_column('alert_logs', 'is_resolved')
    op.drop_index('idx_alert_rules_active', table_name='alert_rules')
    op.create_index(op.f('ix_alert_rules_id'), 'alert_rules', ['id'], unique=False)
    op.alter_column('analytics_alert_rules', 'notification_channels',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.drop_constraint('celery_metrics_snapshots_snapshot_serial_key', 'celery_metrics_snapshots', type_='unique')
    op.drop_constraint('celery_metrics_snapshots_snapshot_uuid_key', 'celery_metrics_snapshots', type_='unique')
    op.drop_index('idx_celery_metrics_snapshots_snapshot_serial', table_name='celery_metrics_snapshots')
    op.drop_index('idx_celery_metrics_snapshots_snapshot_time', table_name='celery_metrics_snapshots')
    op.drop_index('idx_celery_metrics_snapshots_snapshot_uuid', table_name='celery_metrics_snapshots')
    op.drop_index('idx_celery_metrics_snapshots_worker_name', table_name='celery_metrics_snapshots')
    op.create_index(op.f('ix_celery_metrics_snapshots_id'), 'celery_metrics_snapshots', ['id'], unique=False)
    op.drop_constraint('celery_task_history_task_id_key', 'celery_task_history', type_='unique')
    op.drop_constraint('celery_task_history_task_serial_key', 'celery_task_history', type_='unique')
    op.drop_constraint('celery_task_history_task_uuid_key', 'celery_task_history', type_='unique')
    op.drop_index('idx_celery_task_history_completed_at', table_name='celery_task_history')
    op.drop_index('idx_celery_task_history_queue', table_name='celery_task_history')
    op.drop_index('idx_celery_task_history_started_at', table_name='celery_task_history')
    op.drop_index('idx_celery_task_history_status', table_name='celery_task_history')
    op.drop_index('idx_celery_task_history_task_id', table_name='celery_task_history')
    op.drop_index('idx_celery_task_history_task_name', table_name='celery_task_history')
    op.drop_index('idx_celery_task_history_task_serial', table_name='celery_task_history')
    op.drop_index('idx_celery_task_history_task_uuid', table_name='celery_task_history')
    op.drop_index('idx_celery_task_history_worker', table_name='celery_task_history')
    op.create_index(op.f('ix_celery_task_history_id'), 'celery_task_history', ['id'], unique=False)
    op.drop_column('celery_task_history', 'runtime_seconds')
    op.drop_index('idx_device_type_templates_created_by', table_name='device_type_templates')
    op.drop_index('idx_device_type_usage_user_id', table_name='device_type_usage')
    op.drop_index('idx_device_types_created_by', table_name='device_types')
    op.add_column('discovered_devices', sa.Column('open_ports', sa.JSON(), nullable=True))
    op.add_column('discovered_devices', sa.Column('snmp_info', sa.JSON(), nullable=True))
    op.add_column('discovered_devices', sa.Column('confidence_score', sa.Float(), nullable=True))
    op.add_column('discovered_devices', sa.Column('suggested_communication_methods', sa.JSON(), nullable=True))
    op.add_column('discovered_devices', sa.Column('status', sa.String(length=20), nullable=True))
    op.add_column('discovered_devices', sa.Column('target_id', sa.Integer(), nullable=True))
    op.add_column('discovered_devices', sa.Column('imported_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('discovered_devices', sa.Column('imported_by', sa.Integer(), nullable=True))
    op.add_column('discovered_devices', sa.Column('discovered_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.alter_column('discovered_devices', 'ip_address',
               existing_type=postgresql.INET(),
               type_=sa.String(length=45),
               existing_nullable=False)
    op.alter_column('discovered_devices', 'services',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.alter_column('discovered_devices', 'device_type',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=50),
               existing_nullable=True)
    op.drop_constraint('discovered_devices_device_serial_key', 'discovered_devices', type_='unique')
    op.drop_constraint('discovered_devices_device_uuid_key', 'discovered_devices', type_='unique')
    op.drop_index('idx_discovered_devices_device_serial', table_name='discovered_devices')
    op.drop_index('idx_discovered_devices_device_type', table_name='discovered_devices')
    op.drop_index('idx_discovered_devices_device_uuid', table_name='discovered_devices')
    op.drop_index('idx_discovered_devices_discovery_job_id', table_name='discovered_devices')
    op.drop_index('idx_discovered_devices_hostname', table_name='discovered_devices')
    op.drop_index('idx_discovered_devices_ip_address', table_name='discovered_devices')
    op.create_index(op.f('ix_discovered_devices_device_type'), 'discovered_devices', ['device_type'], unique=False)
    op.create_index(op.f('ix_discovered_devices_discovery_job_id'), 'discovered_devices', ['discovery_job_id'], unique=False)
    op.create_index(op.f('ix_discovered_devices_hostname'), 'discovered_devices', ['hostname'], unique=False)
    op.create_index(op.f('ix_discovered_devices_id'), 'discovered_devices', ['id'], unique=False)
    op.create_index(op.f('ix_discovered_devices_ip_address'), 'discovered_devices', ['ip_address'], unique=False)
    op.create_index(op.f('ix_discovered_devices_mac_address'), 'discovered_devices', ['mac_address'], unique=False)
    op.create_index(op.f('ix_discovered_devices_os_type'), 'discovered_devices', ['os_type'], unique=False)
    op.create_index(op.f('ix_discovered_devices_status'), 'discovered_devices', ['status'], unique=False)
    op.create_index(op.f('ix_discovered_devices_target_id'), 'discovered_devices', ['target_id'], unique=False)
    op.drop_constraint('discovered_devices_discovery_job_id_fkey', 'discovered_devices', type_='foreignkey')
    op.create_foreign_key(None, 'discovered_devices', 'universal_targets', ['target_id'], ['id'])
    op.create_foreign_key(None, 'discovered_devices', 'users', ['imported_by'], ['id'])
    op.create_foreign_key(None, 'discovered_devices', 'discovery_jobs', ['discovery_job_id'], ['id'])
    op.drop_column('discovered_devices', 'discovery_method')
    op.drop_column('discovered_devices', 'updated_at')
    op.drop_column('discovered_devices', 'ports')
    op.drop_column('discovered_devices', 'device_uuid')
    op.drop_column('discovered_devices', 'is_reachable')
    op.drop_column('discovered_devices', 'device_serial')
    op.drop_column('discovered_devices', 'raw_data')
    op.drop_column('discovered_devices', 'created_at')
    op.drop_column('discovered_devices', 'vendor')
    op.drop_column('discovered_devices', 'last_seen')
    op.drop_column('discovered_devices', 'os_version')
    op.drop_column('discovered_devices', 'model')
    op.add_column('discovery_jobs', sa.Column('network_ranges', sa.JSON(), nullable=False))
    op.add_column('discovery_jobs', sa.Column('port_ranges', sa.JSON(), nullable=True))
    op.add_column('discovery_jobs', sa.Column('common_ports', sa.JSON(), nullable=True))
    op.add_column('discovery_jobs', sa.Column('timeout', sa.Float(), nullable=True))
    op.add_column('discovery_jobs', sa.Column('max_concurrent', sa.Integer(), nullable=True))
    op.add_column('discovery_jobs', sa.Column('snmp_communities', sa.JSON(), nullable=True))
    op.add_column('discovery_jobs', sa.Column('enable_snmp', sa.Boolean(), nullable=True))
    op.add_column('discovery_jobs', sa.Column('enable_service_detection', sa.Boolean(), nullable=True))
    op.add_column('discovery_jobs', sa.Column('enable_hostname_resolution', sa.Boolean(), nullable=True))
    op.add_column('discovery_jobs', sa.Column('progress', sa.Float(), nullable=True))
    op.add_column('discovery_jobs', sa.Column('total_ips_scanned', sa.Integer(), nullable=True))
    op.add_column('discovery_jobs', sa.Column('devices_discovered', sa.Integer(), nullable=True))
    op.alter_column('discovery_jobs', 'name',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=100),
               existing_nullable=False)
    op.alter_column('discovery_jobs', 'status',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=20),
               nullable=True,
               existing_server_default=sa.text("'pending'::character varying"))
    op.alter_column('discovery_jobs', 'created_by',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_constraint('discovery_jobs_discovery_serial_key', 'discovery_jobs', type_='unique')
    op.drop_constraint('discovery_jobs_discovery_uuid_key', 'discovery_jobs', type_='unique')
    op.drop_index('idx_discovery_jobs_created_by', table_name='discovery_jobs')
    op.drop_index('idx_discovery_jobs_discovery_serial', table_name='discovery_jobs')
    op.drop_index('idx_discovery_jobs_discovery_uuid', table_name='discovery_jobs')
    op.drop_index('idx_discovery_jobs_status', table_name='discovery_jobs')
    op.create_index(op.f('ix_discovery_jobs_id'), 'discovery_jobs', ['id'], unique=False)
    op.create_index(op.f('ix_discovery_jobs_name'), 'discovery_jobs', ['name'], unique=False)
    op.create_index(op.f('ix_discovery_jobs_status'), 'discovery_jobs', ['status'], unique=False)
    op.drop_column('discovery_jobs', 'updated_at')
    op.drop_column('discovery_jobs', 'target_range')
    op.drop_column('discovery_jobs', 'discovery_uuid')
    op.drop_column('discovery_jobs', 'discovery_config')
    op.drop_column('discovery_jobs', 'discovery_serial')
    op.drop_column('discovery_jobs', 'error_message')
    op.drop_column('discovery_jobs', 'discovered_count')
    op.drop_column('discovery_jobs', 'discovery_type')
    op.add_column('discovery_schedules', sa.Column('timezone', sa.String(length=50), nullable=True))
    op.add_column('discovery_schedules', sa.Column('last_run_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('discovery_schedules', sa.Column('next_run_at', sa.DateTime(timezone=True), nullable=True))
    op.alter_column('discovery_schedules', 'name',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=100),
               existing_nullable=False)
    op.alter_column('discovery_schedules', 'created_by',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_constraint('discovery_schedules_schedule_serial_key', 'discovery_schedules', type_='unique')
    op.drop_constraint('discovery_schedules_schedule_uuid_key', 'discovery_schedules', type_='unique')
    op.drop_index('idx_discovery_schedules_created_by', table_name='discovery_schedules')
    op.drop_index('idx_discovery_schedules_is_active', table_name='discovery_schedules')
    op.drop_index('idx_discovery_schedules_next_run', table_name='discovery_schedules')
    op.drop_index('idx_discovery_schedules_schedule_serial', table_name='discovery_schedules')
    op.drop_index('idx_discovery_schedules_schedule_uuid', table_name='discovery_schedules')
    op.drop_index('idx_discovery_schedules_template_id', table_name='discovery_schedules')
    op.create_index(op.f('ix_discovery_schedules_id'), 'discovery_schedules', ['id'], unique=False)
    op.create_index(op.f('ix_discovery_schedules_name'), 'discovery_schedules', ['name'], unique=False)
    op.drop_constraint('discovery_schedules_template_id_fkey', 'discovery_schedules', type_='foreignkey')
    op.create_foreign_key(None, 'discovery_schedules', 'discovery_templates', ['template_id'], ['id'])
    op.drop_column('discovery_schedules', 'last_run')
    op.drop_column('discovery_schedules', 'schedule_uuid')
    op.drop_column('discovery_schedules', 'next_run')
    op.drop_column('discovery_schedules', 'schedule_serial')
    op.add_column('discovery_templates', sa.Column('network_ranges', sa.JSON(), nullable=False))
    op.add_column('discovery_templates', sa.Column('port_ranges', sa.JSON(), nullable=True))
    op.add_column('discovery_templates', sa.Column('common_ports', sa.JSON(), nullable=True))
    op.add_column('discovery_templates', sa.Column('timeout', sa.Float(), nullable=True))
    op.add_column('discovery_templates', sa.Column('max_concurrent', sa.Integer(), nullable=True))
    op.add_column('discovery_templates', sa.Column('snmp_communities', sa.JSON(), nullable=True))
    op.add_column('discovery_templates', sa.Column('enable_snmp', sa.Boolean(), nullable=True))
    op.add_column('discovery_templates', sa.Column('enable_service_detection', sa.Boolean(), nullable=True))
    op.add_column('discovery_templates', sa.Column('enable_hostname_resolution', sa.Boolean(), nullable=True))
    op.add_column('discovery_templates', sa.Column('is_default', sa.Boolean(), nullable=True))
    op.alter_column('discovery_templates', 'name',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=100),
               existing_nullable=False)
    op.alter_column('discovery_templates', 'created_by',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_constraint('discovery_templates_template_serial_key', 'discovery_templates', type_='unique')
    op.drop_constraint('discovery_templates_template_uuid_key', 'discovery_templates', type_='unique')
    op.drop_index('idx_discovery_templates_created_by', table_name='discovery_templates')
    op.drop_index('idx_discovery_templates_discovery_type', table_name='discovery_templates')
    op.drop_index('idx_discovery_templates_is_active', table_name='discovery_templates')
    op.drop_index('idx_discovery_templates_template_serial', table_name='discovery_templates')
    op.drop_index('idx_discovery_templates_template_uuid', table_name='discovery_templates')
    op.create_index(op.f('ix_discovery_templates_id'), 'discovery_templates', ['id'], unique=False)
    op.create_index(op.f('ix_discovery_templates_name'), 'discovery_templates', ['name'], unique=True)
    op.drop_column('discovery_templates', 'template_serial')
    op.drop_column('discovery_templates', 'template_config')
    op.drop_column('discovery_templates', 'template_uuid')
    op.drop_column('discovery_templates', 'discovery_type')
    op.alter_column('generated_reports', 'template_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.drop_index('idx_generated_reports_generated_by', table_name='generated_reports')
    op.drop_index('idx_generated_reports_period', table_name='generated_reports')
    op.drop_index('idx_generated_reports_template', table_name='generated_reports')
    op.create_index(op.f('ix_generated_reports_id'), 'generated_reports', ['id'], unique=False)
    op.drop_constraint('generated_reports_template_id_fkey', 'generated_reports', type_='foreignkey')
    op.drop_constraint('generated_reports_generated_by_fkey', 'generated_reports', type_='foreignkey')
    op.create_foreign_key(None, 'generated_reports', 'report_templates', ['template_id'], ['id'])
    op.create_foreign_key(None, 'generated_reports', 'users', ['generated_by'], ['id'])
    op.drop_index('idx_job_action_results_action_id', table_name='job_action_results')
    op.drop_index('idx_job_action_results_branch_id', table_name='job_action_results')
    op.alter_column('job_actions', 'action_parameters',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.alter_column('job_actions', 'action_config',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.drop_index('idx_job_actions_job_id', table_name='job_actions')
    op.drop_index('idx_job_actions_order', table_name='job_actions')
    op.create_index(op.f('ix_job_actions_id'), 'job_actions', ['id'], unique=False)
    op.drop_constraint('job_actions_job_id_fkey', 'job_actions', type_='foreignkey')
    op.create_foreign_key(None, 'job_actions', 'jobs', ['job_id'], ['id'])
    op.drop_table_comment(
        'job_actions',
        existing_comment='Individual actions within jobs (commands, scripts, etc.)',
        schema=None
    )
    op.drop_index('idx_job_execution_branches_branch_serial', table_name='job_execution_branches')
    op.drop_index('idx_job_execution_branches_branch_uuid', table_name='job_execution_branches')
    op.drop_index('idx_job_execution_branches_execution_id', table_name='job_execution_branches')
    op.drop_index('idx_job_execution_branches_execution_status', table_name='job_execution_branches')
    op.drop_index('idx_job_execution_branches_status', table_name='job_execution_branches')
    op.drop_index('idx_job_execution_branches_target_id', table_name='job_execution_branches')
    op.drop_index('idx_job_execution_branches_target_serial_ref', table_name='job_execution_branches')
    op.drop_constraint('job_execution_branches_branch_serial_key', 'job_execution_branches', type_='unique')
    op.drop_constraint('job_execution_branches_branch_uuid_key', 'job_execution_branches', type_='unique')
    op.create_index(op.f('ix_job_execution_branches_branch_serial'), 'job_execution_branches', ['branch_serial'], unique=True)
    op.create_index(op.f('ix_job_execution_branches_branch_uuid'), 'job_execution_branches', ['branch_uuid'], unique=True)
    op.create_index(op.f('ix_job_execution_branches_id'), 'job_execution_branches', ['id'], unique=False)
    op.create_index(op.f('ix_job_execution_branches_target_serial_ref'), 'job_execution_branches', ['target_serial_ref'], unique=False)
    op.drop_constraint('job_execution_branches_job_execution_id_fkey', 'job_execution_branches', type_='foreignkey')
    op.create_foreign_key(None, 'job_execution_branches', 'job_executions', ['job_execution_id'], ['id'])
    op.drop_table_comment(
        'job_execution_branches',
        existing_comment='Per-target execution tracking',
        schema=None
    )
    op.alter_column('job_execution_logs', 'job_execution_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    # Fix enum type conversions with proper casting
    op.execute("ALTER TABLE job_execution_logs ALTER COLUMN log_phase TYPE logphase USING log_phase::text::logphase")
    
    # Handle log_level with default value
    op.execute("ALTER TABLE job_execution_logs ALTER COLUMN log_level DROP DEFAULT")
    op.execute("ALTER TABLE job_execution_logs ALTER COLUMN log_level TYPE loglevel USING log_level::text::loglevel")
    op.execute("ALTER TABLE job_execution_logs ALTER COLUMN log_level SET DEFAULT 'info'::loglevel")
    
    op.execute("ALTER TABLE job_execution_logs ALTER COLUMN log_category TYPE logcategory USING log_category::text::logcategory")
    op.alter_column('job_execution_logs', 'log_details',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.drop_index('idx_job_execution_logs_branch_id', table_name='job_execution_logs')
    op.drop_index('idx_job_execution_logs_category', table_name='job_execution_logs')
    op.drop_index('idx_job_execution_logs_execution_id', table_name='job_execution_logs')
    op.drop_index('idx_job_execution_logs_phase', table_name='job_execution_logs')
    op.drop_index('idx_job_execution_logs_timestamp', table_name='job_execution_logs')
    op.drop_index('idx_job_execution_logs_timestamp_level', table_name='job_execution_logs')
    op.create_index(op.f('ix_job_execution_logs_id'), 'job_execution_logs', ['id'], unique=False)
    op.drop_constraint('job_execution_logs_branch_id_fkey', 'job_execution_logs', type_='foreignkey')
    op.drop_constraint('job_execution_logs_job_execution_id_fkey', 'job_execution_logs', type_='foreignkey')
    op.create_foreign_key(None, 'job_execution_logs', 'job_executions', ['job_execution_id'], ['id'])
    op.create_foreign_key(None, 'job_execution_logs', 'job_execution_branches', ['branch_id'], ['id'])
    op.drop_table_comment(
        'job_execution_logs',
        existing_comment='Comprehensive logging with taxonomy-based categorization',
        schema=None
    )
    op.drop_index('idx_job_executions_created_at', table_name='job_executions')
    op.drop_index('idx_job_executions_execution_serial', table_name='job_executions')
    op.drop_index('idx_job_executions_execution_uuid', table_name='job_executions')
    op.drop_index('idx_job_executions_job_id', table_name='job_executions')
    op.drop_index('idx_job_executions_job_id_status', table_name='job_executions')
    op.drop_index('idx_job_executions_status', table_name='job_executions')
    op.drop_constraint('job_executions_execution_serial_key', 'job_executions', type_='unique')
    op.drop_constraint('job_executions_execution_uuid_key', 'job_executions', type_='unique')
    op.create_index(op.f('ix_job_executions_execution_serial'), 'job_executions', ['execution_serial'], unique=True)
    op.create_index(op.f('ix_job_executions_execution_uuid'), 'job_executions', ['execution_uuid'], unique=True)
    op.create_index(op.f('ix_job_executions_id'), 'job_executions', ['id'], unique=False)
    op.drop_constraint('job_executions_job_id_fkey', 'job_executions', type_='foreignkey')
    op.create_foreign_key(None, 'job_executions', 'jobs', ['job_id'], ['id'])
    op.drop_table_comment(
        'job_executions',
        existing_comment='Execution instances of jobs',
        schema=None
    )
    op.add_column('job_schedules', sa.Column('enabled', sa.Boolean(), nullable=True))
    op.add_column('job_schedules', sa.Column('execute_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('job_schedules', sa.Column('recurring_type', sa.String(length=20), nullable=True))
    op.add_column('job_schedules', sa.Column('interval', sa.Integer(), nullable=True))
    op.add_column('job_schedules', sa.Column('time', sa.String(length=8), nullable=True))
    op.add_column('job_schedules', sa.Column('days_of_week', sa.String(length=20), nullable=True))
    op.add_column('job_schedules', sa.Column('day_of_month', sa.Integer(), nullable=True))
    op.add_column('job_schedules', sa.Column('max_executions', sa.Integer(), nullable=True))
    op.add_column('job_schedules', sa.Column('execution_count', sa.Integer(), nullable=True))
    op.add_column('job_schedules', sa.Column('next_run', sa.DateTime(timezone=True), nullable=True))
    op.add_column('job_schedules', sa.Column('last_run', sa.DateTime(timezone=True), nullable=True))
    op.alter_column('job_schedules', 'schedule_uuid',
               existing_type=sa.UUID(),
               nullable=True,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.alter_column('job_schedules', 'schedule_type',
               existing_type=postgresql.ENUM('cron', 'interval', 'one_time', name='schedule_type'),
               type_=sa.String(length=20),
               existing_nullable=False,
               existing_server_default=sa.text("'cron'::schedule_type"))
    op.drop_index('idx_job_schedules_created_by', table_name='job_schedules')
    op.drop_index('idx_job_schedules_is_active', table_name='job_schedules')
    op.drop_index('idx_job_schedules_job_id', table_name='job_schedules')
    op.drop_index('idx_job_schedules_next_run_at', table_name='job_schedules')
    op.drop_index('idx_job_schedules_schedule_serial', table_name='job_schedules')
    op.drop_index('idx_job_schedules_schedule_type', table_name='job_schedules')
    op.drop_index('idx_job_schedules_schedule_uuid', table_name='job_schedules')
    op.drop_index('idx_job_schedules_status', table_name='job_schedules')
    op.drop_constraint('job_schedules_schedule_serial_key', 'job_schedules', type_='unique')
    op.drop_constraint('job_schedules_schedule_uuid_key', 'job_schedules', type_='unique')
    op.create_index(op.f('ix_job_schedules_id'), 'job_schedules', ['id'], unique=False)
    op.create_index(op.f('ix_job_schedules_schedule_uuid'), 'job_schedules', ['schedule_uuid'], unique=True)
    op.drop_constraint('job_schedules_job_id_fkey', 'job_schedules', type_='foreignkey')
    op.drop_constraint('job_schedules_created_by_fkey', 'job_schedules', type_='foreignkey')
    op.create_foreign_key(None, 'job_schedules', 'jobs', ['job_id'], ['id'])
    op.drop_column('job_schedules', 'last_run_at')
    op.drop_column('job_schedules', 'schedule_config')
    op.drop_column('job_schedules', 'max_runs')
    op.drop_column('job_schedules', 'status')
    op.drop_column('job_schedules', 'name')
    op.drop_column('job_schedules', 'start_date')
    op.drop_column('job_schedules', 'next_run_at')
    op.drop_column('job_schedules', 'created_by')
    op.drop_column('job_schedules', 'current_runs')
    op.drop_column('job_schedules', 'interval_seconds')
    op.drop_column('job_schedules', 'is_active')
    op.drop_column('job_schedules', 'schedule_serial')
    op.drop_index('idx_job_targets_job_id', table_name='job_targets')
    op.drop_index('idx_job_targets_target_id', table_name='job_targets')
    op.drop_constraint('job_targets_job_id_target_id_key', 'job_targets', type_='unique')
    op.create_index(op.f('ix_job_targets_id'), 'job_targets', ['id'], unique=False)
    op.drop_constraint('job_targets_target_id_fkey', 'job_targets', type_='foreignkey')
    op.drop_constraint('job_targets_job_id_fkey', 'job_targets', type_='foreignkey')
    op.create_foreign_key(None, 'job_targets', 'universal_targets', ['target_id'], ['id'])
    op.create_foreign_key(None, 'job_targets', 'jobs', ['job_id'], ['id'])
    op.drop_table_comment(
        'job_targets',
        existing_comment='Association table linking jobs to their target systems',
        schema=None
    )
    op.drop_index('idx_jobs_created_by', table_name='jobs')
    op.drop_index('idx_jobs_job_serial', table_name='jobs')
    op.drop_index('idx_jobs_job_uuid', table_name='jobs')
    op.drop_index('idx_jobs_scheduled_at', table_name='jobs')
    op.drop_index('idx_jobs_status', table_name='jobs')
    op.drop_index('idx_jobs_status_created_by', table_name='jobs')
    op.drop_constraint('jobs_job_serial_key', 'jobs', type_='unique')
    op.drop_constraint('jobs_job_uuid_key', 'jobs', type_='unique')
    op.create_index(op.f('ix_jobs_id'), 'jobs', ['id'], unique=False)
    op.create_index(op.f('ix_jobs_job_serial'), 'jobs', ['job_serial'], unique=True)
    op.create_index(op.f('ix_jobs_job_uuid'), 'jobs', ['job_uuid'], unique=True)
    op.drop_table_comment(
        'jobs',
        existing_comment='Core job entity - represents automation jobs',
        schema=None
    )
    op.add_column('notification_logs', sa.Column('body', sa.Text(), nullable=True))
    op.add_column('notification_logs', sa.Column('context_metadata', sa.JSON(), nullable=True))
    op.alter_column('notification_logs', 'notification_type',
               existing_type=postgresql.ENUM('email', 'slack', 'webhook', 'sms', name='notification_type'),
               type_=sa.String(length=50),
               existing_nullable=False)
    op.alter_column('notification_logs', 'recipient',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=200),
               existing_nullable=False)
    op.alter_column('notification_logs', 'subject',
               existing_type=sa.VARCHAR(length=500),
               type_=sa.String(length=200),
               existing_nullable=True)
    op.alter_column('notification_logs', 'status',
               existing_type=postgresql.ENUM('pending', 'sent', 'failed', 'delivered', name='notification_status'),
               type_=sa.String(length=20),
               existing_nullable=False,
               existing_server_default=sa.text("'pending'::notification_status"))
    op.drop_index('idx_notification_logs_log_serial', table_name='notification_logs')
    op.drop_index('idx_notification_logs_log_uuid', table_name='notification_logs')
    op.drop_index('idx_notification_logs_notification_type', table_name='notification_logs')
    op.drop_index('idx_notification_logs_recipient', table_name='notification_logs')
    op.drop_index('idx_notification_logs_sent_at', table_name='notification_logs')
    op.drop_index('idx_notification_logs_status', table_name='notification_logs')
    op.drop_index('idx_notification_logs_template_id', table_name='notification_logs')
    op.drop_constraint('notification_logs_log_serial_key', 'notification_logs', type_='unique')
    op.drop_constraint('notification_logs_log_uuid_key', 'notification_logs', type_='unique')
    op.create_index(op.f('ix_notification_logs_id'), 'notification_logs', ['id'], unique=False)
    op.drop_constraint('notification_logs_template_id_fkey', 'notification_logs', type_='foreignkey')
    op.create_foreign_key(None, 'notification_logs', 'notification_templates', ['template_id'], ['id'])
    op.drop_column('notification_logs', 'message')
    op.drop_column('notification_logs', 'delivered_at')
    op.drop_column('notification_logs', 'max_retries')
    op.drop_column('notification_logs', 'retry_count')
    op.drop_column('notification_logs', 'log_uuid')
    op.drop_column('notification_logs', 'log_serial')
    op.drop_column('notification_logs', 'context_data')
    op.add_column('notification_templates', sa.Column('template_type', sa.String(length=50), nullable=False))
    op.alter_column('notification_templates', 'name',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=100),
               existing_nullable=False)
    op.alter_column('notification_templates', 'subject_template',
               existing_type=sa.TEXT(),
               type_=sa.String(length=200),
               nullable=False)
    op.drop_index('idx_notification_templates_created_by', table_name='notification_templates')
    op.drop_index('idx_notification_templates_is_active', table_name='notification_templates')
    op.drop_index('idx_notification_templates_notification_type', table_name='notification_templates')
    op.drop_index('idx_notification_templates_template_serial', table_name='notification_templates')
    op.drop_index('idx_notification_templates_template_uuid', table_name='notification_templates')
    op.drop_constraint('notification_templates_template_serial_key', 'notification_templates', type_='unique')
    op.drop_constraint('notification_templates_template_uuid_key', 'notification_templates', type_='unique')
    op.create_index(op.f('ix_notification_templates_id'), 'notification_templates', ['id'], unique=False)
    op.create_index(op.f('ix_notification_templates_name'), 'notification_templates', ['name'], unique=True)
    op.drop_constraint('notification_templates_created_by_fkey', 'notification_templates', type_='foreignkey')
    op.drop_column('notification_templates', 'template_uuid')
    op.drop_column('notification_templates', 'template_serial')
    op.drop_column('notification_templates', 'notification_type')
    op.drop_column('notification_templates', 'template_config')
    op.drop_column('notification_templates', 'created_by')
    op.drop_index('idx_performance_metrics_job_time', table_name='performance_metrics')
    op.drop_index('idx_performance_metrics_target_time', table_name='performance_metrics')
    op.drop_index('idx_performance_metrics_timestamp', table_name='performance_metrics')
    op.drop_index('idx_performance_metrics_type_period_time', table_name='performance_metrics')
    op.create_index('idx_metrics_job_time', 'performance_metrics', ['job_id', 'timestamp"], unique=False)
    op.create_index('idx_metrics_target_time', 'performance_metrics', ['target_id', 'timestamp"], unique=False)
    op.create_index('idx_metrics_type_period_time', 'performance_metrics', ['metric_type', 'aggregation_period', 'timestamp"], unique=False)
    op.create_index(op.f('ix_performance_metrics_aggregation_period'), 'performance_metrics', ['aggregation_period'], unique=False)
    op.create_index(op.f('ix_performance_metrics_id'), 'performance_metrics', ['id'], unique=False)
    op.create_index(op.f('ix_performance_metrics_job_id'), 'performance_metrics', ['job_id'], unique=False)
    op.create_index(op.f('ix_performance_metrics_metric_type'), 'performance_metrics', ['metric_type'], unique=False)
    op.create_index(op.f('ix_performance_metrics_target_id'), 'performance_metrics', ['target_id'], unique=False)
    op.create_index(op.f('ix_performance_metrics_timestamp'), 'performance_metrics', ['timestamp'], unique=False)
    op.drop_constraint('performance_metrics_target_id_fkey', 'performance_metrics', type_='foreignkey')
    op.drop_constraint('performance_metrics_job_id_fkey', 'performance_metrics', type_='foreignkey')
    op.create_foreign_key(None, 'performance_metrics', 'universal_targets', ['target_id'], ['id'])
    op.create_foreign_key(None, 'performance_metrics', 'jobs', ['job_id'], ['id'])
    op.create_index(op.f('ix_report_templates_id'), 'report_templates', ['id'], unique=False)
    op.drop_index('idx_schedule_executions_execution_serial', table_name='schedule_executions')
    op.drop_index('idx_schedule_executions_execution_uuid', table_name='schedule_executions')
    op.drop_index('idx_schedule_executions_job_execution_id', table_name='schedule_executions')
    op.drop_index('idx_schedule_executions_job_schedule_id', table_name='schedule_executions')
    op.drop_index('idx_schedule_executions_scheduled_at', table_name='schedule_executions')
    op.drop_index('idx_schedule_executions_status', table_name='schedule_executions')
    op.drop_constraint('schedule_executions_execution_serial_key', 'schedule_executions', type_='unique')
    op.drop_constraint('schedule_executions_execution_uuid_key', 'schedule_executions', type_='unique')
    op.create_index(op.f('ix_schedule_executions_id'), 'schedule_executions', ['id'], unique=False)
    op.drop_constraint('schedule_executions_job_execution_id_fkey', 'schedule_executions', type_='foreignkey')
    op.drop_constraint('schedule_executions_job_schedule_id_fkey', 'schedule_executions', type_='foreignkey')
    op.create_foreign_key(None, 'schedule_executions', 'job_executions', ['job_execution_id'], ['id'])
    op.create_foreign_key(None, 'schedule_executions', 'job_schedules', ['job_schedule_id'], ['id'])
    op.drop_index('idx_system_health_snapshots_timestamp', table_name='system_health_snapshots')
    op.drop_index('idx_system_health_timestamp', table_name='system_health_snapshots')
    op.create_index(op.f('ix_system_health_snapshots_id'), 'system_health_snapshots', ['id'], unique=False)
    op.create_index(op.f('ix_system_health_snapshots_timestamp'), 'system_health_snapshots', ['timestamp'], unique=False)
    op.drop_constraint('system_settings_setting_key_key', 'system_settings', type_='unique')
    op.create_index(op.f('ix_system_settings_id'), 'system_settings', ['id'], unique=False)
    op.create_index(op.f('ix_system_settings_setting_key'), 'system_settings', ['setting_key'], unique=True)
    op.drop_index('idx_target_communication_methods_target_id', table_name='target_communication_methods')
    op.create_index(op.f('ix_target_communication_methods_id'), 'target_communication_methods', ['id'], unique=False)
    op.drop_constraint('target_communication_methods_target_id_fkey', 'target_communication_methods', type_='foreignkey')
    op.create_foreign_key(None, 'target_communication_methods', 'universal_targets', ['target_id'], ['id'])
    op.drop_index('idx_target_credentials_communication_method_id', table_name='target_credentials')
    op.create_index(op.f('ix_target_credentials_id'), 'target_credentials', ['id'], unique=False)
    op.drop_constraint('target_credentials_communication_method_id_fkey', 'target_credentials', type_='foreignkey')
    op.create_foreign_key(None, 'target_credentials', 'target_communication_methods', ['communication_method_id'], ['id'])
    op.drop_index('idx_universal_targets_active', table_name='universal_targets')
    op.drop_index('idx_universal_targets_environment', table_name='universal_targets')
    op.drop_index('idx_universal_targets_health_status', table_name='universal_targets')
    op.drop_index('idx_universal_targets_status', table_name='universal_targets')
    op.drop_index('idx_universal_targets_target_serial', table_name='universal_targets')
    op.drop_index('idx_universal_targets_target_uuid', table_name='universal_targets')
    op.drop_index('idx_universal_targets_type', table_name='universal_targets')
    op.drop_index('idx_universal_targets_type_environment', table_name='universal_targets')
    op.drop_constraint('universal_targets_target_serial_key', 'universal_targets', type_='unique')
    op.drop_constraint('universal_targets_target_uuid_key', 'universal_targets', type_='unique')
    op.create_index(op.f('ix_universal_targets_id'), 'universal_targets', ['id'], unique=False)
    op.create_index(op.f('ix_universal_targets_name'), 'universal_targets', ['name'], unique=False)
    op.create_index(op.f('ix_universal_targets_target_serial'), 'universal_targets', ['target_serial'], unique=True)
    op.create_index(op.f('ix_universal_targets_target_uuid'), 'universal_targets', ['target_uuid'], unique=True)
    op.drop_index('idx_user_sessions_expires', table_name='user_sessions')
    op.drop_index('idx_user_sessions_token', table_name='user_sessions')
    op.drop_index('idx_user_sessions_user_id', table_name='user_sessions')
    op.drop_constraint('user_sessions_session_token_key', 'user_sessions', type_='unique')
    op.create_index(op.f('ix_user_sessions_id'), 'user_sessions', ['id'], unique=False)
    op.create_index(op.f('ix_user_sessions_session_token'), 'user_sessions', ['session_token'], unique=True)
    op.drop_index('idx_users_active', table_name='users')
    op.drop_index('idx_users_email', table_name='users')
    op.drop_index('idx_users_role', table_name='users')
    op.drop_index('idx_users_username', table_name='users')
    op.drop_constraint('users_email_key', 'users', type_='unique')
    op.drop_constraint('users_username_key', 'users', type_='unique')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_unique_constraint('users_username_key', 'users', ['username'])
    op.create_unique_constraint('users_email_key', 'users', ['email'])
    op.create_index('idx_users_username', 'users', ['username'], unique=False)
    op.create_index('idx_users_role', 'users', ['role'], unique=False)
    op.create_index('idx_users_email', 'users', ['email'], unique=False)
    op.create_index('idx_users_active', 'users', ['is_active'], unique=False)
    op.drop_index(op.f('ix_user_sessions_session_token'), table_name='user_sessions')
    op.drop_index(op.f('ix_user_sessions_id'), table_name='user_sessions')
    op.create_unique_constraint('user_sessions_session_token_key', 'user_sessions', ['session_token'])
    op.create_index('idx_user_sessions_user_id', 'user_sessions', ['user_id'], unique=False)
    op.create_index('idx_user_sessions_token', 'user_sessions', ['session_token'], unique=False)
    op.create_index('idx_user_sessions_expires', 'user_sessions', ['expires_at'], unique=False)
    op.drop_index(op.f('ix_universal_targets_target_uuid'), table_name='universal_targets')
    op.drop_index(op.f('ix_universal_targets_target_serial'), table_name='universal_targets')
    op.drop_index(op.f('ix_universal_targets_name'), table_name='universal_targets')
    op.drop_index(op.f('ix_universal_targets_id'), table_name='universal_targets')
    op.create_unique_constraint('universal_targets_target_uuid_key', 'universal_targets', ['target_uuid'])
    op.create_unique_constraint('universal_targets_target_serial_key', 'universal_targets', ['target_serial'])
    op.create_index('idx_universal_targets_type_environment', 'universal_targets', ['target_type', 'environment"], unique=False)
    op.create_index('idx_universal_targets_type', 'universal_targets', ['target_type'], unique=False)
    op.create_index('idx_universal_targets_target_uuid', 'universal_targets', ['target_uuid'], unique=False)
    op.create_index('idx_universal_targets_target_serial', 'universal_targets', ['target_serial'], unique=False)
    op.create_index('idx_universal_targets_status', 'universal_targets', ['status'], unique=False)
    op.create_index('idx_universal_targets_health_status', 'universal_targets', ['health_status'], unique=False)
    op.create_index('idx_universal_targets_environment', 'universal_targets', ['environment'], unique=False)
    op.create_index('idx_universal_targets_active', 'universal_targets', ['is_active'], unique=False)
    op.drop_constraint(None, 'target_credentials', type_='foreignkey')
    op.create_foreign_key('target_credentials_communication_method_id_fkey', 'target_credentials', 'target_communication_methods', ['communication_method_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_target_credentials_id'), table_name='target_credentials')
    op.create_index('idx_target_credentials_communication_method_id', 'target_credentials', ['communication_method_id'], unique=False)
    op.drop_constraint(None, 'target_communication_methods', type_='foreignkey')
    op.create_foreign_key('target_communication_methods_target_id_fkey', 'target_communication_methods', 'universal_targets', ['target_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_target_communication_methods_id'), table_name='target_communication_methods')
    op.create_index('idx_target_communication_methods_target_id', 'target_communication_methods', ['target_id'], unique=False)
    op.drop_index(op.f('ix_system_settings_setting_key'), table_name='system_settings')
    op.drop_index(op.f('ix_system_settings_id'), table_name='system_settings')
    op.create_unique_constraint('system_settings_setting_key_key', 'system_settings', ['setting_key'])
    op.drop_index(op.f('ix_system_health_snapshots_timestamp'), table_name='system_health_snapshots')
    op.drop_index(op.f('ix_system_health_snapshots_id'), table_name='system_health_snapshots')
    op.create_index('idx_system_health_timestamp', 'system_health_snapshots', ['timestamp'], unique=False)
    op.create_index('idx_system_health_snapshots_timestamp', 'system_health_snapshots', ['timestamp'], unique=False)
    op.drop_constraint(None, 'schedule_executions', type_='foreignkey')
    op.drop_constraint(None, 'schedule_executions', type_='foreignkey')
    op.create_foreign_key('schedule_executions_job_schedule_id_fkey', 'schedule_executions', 'job_schedules', ['job_schedule_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key('schedule_executions_job_execution_id_fkey', 'schedule_executions', 'job_executions', ['job_execution_id'], ['id'], ondelete='SET NULL')
    op.drop_index(op.f('ix_schedule_executions_id'), table_name='schedule_executions')
    op.create_unique_constraint('schedule_executions_execution_uuid_key', 'schedule_executions', ['execution_uuid'])
    op.create_unique_constraint('schedule_executions_execution_serial_key', 'schedule_executions', ['execution_serial'])
    op.create_index('idx_schedule_executions_status', 'schedule_executions', ['status'], unique=False)
    op.create_index('idx_schedule_executions_scheduled_at', 'schedule_executions', ['scheduled_at'], unique=False)
    op.create_index('idx_schedule_executions_job_schedule_id', 'schedule_executions', ['job_schedule_id'], unique=False)
    op.create_index('idx_schedule_executions_job_execution_id', 'schedule_executions', ['job_execution_id'], unique=False)
    op.create_index('idx_schedule_executions_execution_uuid', 'schedule_executions', ['execution_uuid'], unique=False)
    op.create_index('idx_schedule_executions_execution_serial', 'schedule_executions', ['execution_serial'], unique=False)
    op.drop_index(op.f('ix_report_templates_id'), table_name='report_templates')
    op.drop_constraint(None, 'performance_metrics', type_='foreignkey')
    op.drop_constraint(None, 'performance_metrics', type_='foreignkey')
    op.create_foreign_key('performance_metrics_job_id_fkey', 'performance_metrics', 'jobs', ['job_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key('performance_metrics_target_id_fkey', 'performance_metrics', 'universal_targets', ['target_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_performance_metrics_timestamp'), table_name='performance_metrics')
    op.drop_index(op.f('ix_performance_metrics_target_id'), table_name='performance_metrics')
    op.drop_index(op.f('ix_performance_metrics_metric_type'), table_name='performance_metrics')
    op.drop_index(op.f('ix_performance_metrics_job_id'), table_name='performance_metrics')
    op.drop_index(op.f('ix_performance_metrics_id'), table_name='performance_metrics')
    op.drop_index(op.f('ix_performance_metrics_aggregation_period'), table_name='performance_metrics')
    op.drop_index('idx_metrics_type_period_time', table_name='performance_metrics')
    op.drop_index('idx_metrics_target_time', table_name='performance_metrics')
    op.drop_index('idx_metrics_job_time', table_name='performance_metrics')
    op.create_index('idx_performance_metrics_type_period_time', 'performance_metrics', ['metric_type', 'aggregation_period', 'timestamp"], unique=False)
    op.create_index('idx_performance_metrics_timestamp', 'performance_metrics', ['timestamp'], unique=False)
    op.create_index('idx_performance_metrics_target_time', 'performance_metrics', ['target_id', 'timestamp"], unique=False)
    op.create_index('idx_performance_metrics_job_time', 'performance_metrics', ['job_id', 'timestamp"], unique=False)
    op.add_column('notification_templates', sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('notification_templates', sa.Column('template_config', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('notification_templates', sa.Column('notification_type', postgresql.ENUM('email', 'slack', 'webhook', 'sms', name='notification_type'), autoincrement=False, nullable=False))
    op.add_column('notification_templates', sa.Column('template_serial', sa.VARCHAR(length=50), server_default=sa.text("('NTMPL-'::text || lpad((nextval('notification_templates_id_seq'::regclass))::text, 8, '0'::text))"), autoincrement=False, nullable=False))
    op.add_column('notification_templates', sa.Column('template_uuid', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False))
    op.create_foreign_key('notification_templates_created_by_fkey', 'notification_templates', 'users', ['created_by'], ['id'])
    op.drop_index(op.f('ix_notification_templates_name'), table_name='notification_templates')
    op.drop_index(op.f('ix_notification_templates_id'), table_name='notification_templates')
    op.create_unique_constraint('notification_templates_template_uuid_key', 'notification_templates', ['template_uuid'])
    op.create_unique_constraint('notification_templates_template_serial_key', 'notification_templates', ['template_serial'])
    op.create_index('idx_notification_templates_template_uuid', 'notification_templates', ['template_uuid'], unique=False)
    op.create_index('idx_notification_templates_template_serial', 'notification_templates', ['template_serial'], unique=False)
    op.create_index('idx_notification_templates_notification_type', 'notification_templates', ['notification_type'], unique=False)
    op.create_index('idx_notification_templates_is_active', 'notification_templates', ['is_active'], unique=False)
    op.create_index('idx_notification_templates_created_by', 'notification_templates', ['created_by'], unique=False)
    op.alter_column('notification_templates', 'subject_template',
               existing_type=sa.String(length=200),
               type_=sa.TEXT(),
               nullable=True)
    op.alter_column('notification_templates', 'name',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=255),
               existing_nullable=False)
    op.drop_column('notification_templates', 'template_type')
    op.add_column('notification_logs', sa.Column('context_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('notification_logs', sa.Column('log_serial', sa.VARCHAR(length=50), server_default=sa.text("('NLOG-'::text || lpad((nextval('notification_logs_id_seq'::regclass))::text, 8, '0'::text))"), autoincrement=False, nullable=False))
    op.add_column('notification_logs', sa.Column('log_uuid', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False))
    op.add_column('notification_logs', sa.Column('retry_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True))
    op.add_column('notification_logs', sa.Column('max_retries', sa.INTEGER(), server_default=sa.text('3'), autoincrement=False, nullable=True))
    op.add_column('notification_logs', sa.Column('delivered_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('notification_logs', sa.Column('message', sa.TEXT(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'notification_logs', type_='foreignkey')
    op.create_foreign_key('notification_logs_template_id_fkey', 'notification_logs', 'notification_templates', ['template_id'], ['id'], ondelete='SET NULL')
    op.drop_index(op.f('ix_notification_logs_id'), table_name='notification_logs')
    op.create_unique_constraint('notification_logs_log_uuid_key', 'notification_logs', ['log_uuid'])
    op.create_unique_constraint('notification_logs_log_serial_key', 'notification_logs', ['log_serial'])
    op.create_index('idx_notification_logs_template_id', 'notification_logs', ['template_id'], unique=False)
    op.create_index('idx_notification_logs_status', 'notification_logs', ['status'], unique=False)
    op.create_index('idx_notification_logs_sent_at', 'notification_logs', ['sent_at'], unique=False)
    op.create_index('idx_notification_logs_recipient', 'notification_logs', ['recipient'], unique=False)
    op.create_index('idx_notification_logs_notification_type', 'notification_logs', ['notification_type'], unique=False)
    op.create_index('idx_notification_logs_log_uuid', 'notification_logs', ['log_uuid'], unique=False)
    op.create_index('idx_notification_logs_log_serial', 'notification_logs', ['log_serial'], unique=False)
    op.alter_column('notification_logs', 'status',
               existing_type=sa.String(length=20),
               type_=postgresql.ENUM('pending', 'sent', 'failed', 'delivered', name='notification_status'),
               existing_nullable=False,
               existing_server_default=sa.text("'pending'::notification_status"))
    op.alter_column('notification_logs', 'subject',
               existing_type=sa.String(length=200),
               type_=sa.VARCHAR(length=500),
               existing_nullable=True)
    op.alter_column('notification_logs', 'recipient',
               existing_type=sa.String(length=200),
               type_=sa.VARCHAR(length=255),
               existing_nullable=False)
    op.alter_column('notification_logs', 'notification_type',
               existing_type=sa.String(length=50),
               type_=postgresql.ENUM('email', 'slack', 'webhook', 'sms', name='notification_type'),
               existing_nullable=False)
    op.drop_column('notification_logs', 'context_metadata')
    op.drop_column('notification_logs', 'body')
    op.create_table_comment(
        'jobs',
        'Core job entity - represents automation jobs',
        existing_comment=None,
        schema=None
    )
    op.drop_index(op.f('ix_jobs_job_uuid'), table_name='jobs')
    op.drop_index(op.f('ix_jobs_job_serial'), table_name='jobs')
    op.drop_index(op.f('ix_jobs_id'), table_name='jobs')
    op.create_unique_constraint('jobs_job_uuid_key', 'jobs', ['job_uuid'])
    op.create_unique_constraint('jobs_job_serial_key', 'jobs', ['job_serial'])
    op.create_index('idx_jobs_status_created_by', 'jobs', ['status', 'created_by"], unique=False)
    op.create_index('idx_jobs_status', 'jobs', ['status'], unique=False)
    op.create_index('idx_jobs_scheduled_at', 'jobs', ['scheduled_at'], unique=False)
    op.create_index('idx_jobs_job_uuid', 'jobs', ['job_uuid'], unique=False)
    op.create_index('idx_jobs_job_serial', 'jobs', ['job_serial'], unique=False)
    op.create_index('idx_jobs_created_by', 'jobs', ['created_by'], unique=False)
    op.create_table_comment(
        'job_targets',
        'Association table linking jobs to their target systems',
        existing_comment=None,
        schema=None
    )
    op.drop_constraint(None, 'job_targets', type_='foreignkey')
    op.drop_constraint(None, 'job_targets', type_='foreignkey')
    op.create_foreign_key('job_targets_job_id_fkey', 'job_targets', 'jobs', ['job_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key('job_targets_target_id_fkey', 'job_targets', 'universal_targets', ['target_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_job_targets_id'), table_name='job_targets')
    op.create_unique_constraint('job_targets_job_id_target_id_key', 'job_targets', ['job_id', 'target_id"])
    op.create_index('idx_job_targets_target_id', 'job_targets', ['target_id'], unique=False)
    op.create_index('idx_job_targets_job_id', 'job_targets', ['job_id'], unique=False)
    op.add_column('job_schedules', sa.Column('schedule_serial', sa.VARCHAR(length=50), server_default=sa.text("('JSCHED-'::text || lpad((nextval('job_schedules_id_seq'::regclass))::text, 8, '0'::text))"), autoincrement=False, nullable=False))
    op.add_column('job_schedules', sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True))
    op.add_column('job_schedules', sa.Column('interval_seconds', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('job_schedules', sa.Column('current_runs', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True))
    op.add_column('job_schedules', sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('job_schedules', sa.Column('next_run_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('job_schedules', sa.Column('start_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('job_schedules', sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.add_column('job_schedules', sa.Column('status', postgresql.ENUM('active', 'paused', 'disabled', 'expired', name='schedule_status'), server_default=sa.text("'active'::schedule_status"), autoincrement=False, nullable=False))
    op.add_column('job_schedules', sa.Column('max_runs', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('job_schedules', sa.Column('schedule_config', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('job_schedules', sa.Column('last_run_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'job_schedules', type_='foreignkey')
    op.create_foreign_key('job_schedules_created_by_fkey', 'job_schedules', 'users', ['created_by'], ['id'])
    op.create_foreign_key('job_schedules_job_id_fkey', 'job_schedules', 'jobs', ['job_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_job_schedules_schedule_uuid'), table_name='job_schedules')
    op.drop_index(op.f('ix_job_schedules_id'), table_name='job_schedules')
    op.create_unique_constraint('job_schedules_schedule_uuid_key', 'job_schedules', ['schedule_uuid'])
    op.create_unique_constraint('job_schedules_schedule_serial_key', 'job_schedules', ['schedule_serial'])
    op.create_index('idx_job_schedules_status', 'job_schedules', ['status'], unique=False)
    op.create_index('idx_job_schedules_schedule_uuid', 'job_schedules', ['schedule_uuid'], unique=False)
    op.create_index('idx_job_schedules_schedule_type', 'job_schedules', ['schedule_type'], unique=False)
    op.create_index('idx_job_schedules_schedule_serial', 'job_schedules', ['schedule_serial'], unique=False)
    op.create_index('idx_job_schedules_next_run_at', 'job_schedules', ['next_run_at'], unique=False)
    op.create_index('idx_job_schedules_job_id', 'job_schedules', ['job_id'], unique=False)
    op.create_index('idx_job_schedules_is_active', 'job_schedules', ['is_active'], unique=False)
    op.create_index('idx_job_schedules_created_by', 'job_schedules', ['created_by'], unique=False)
    op.alter_column('job_schedules', 'schedule_type',
               existing_type=sa.String(length=20),
               type_=postgresql.ENUM('cron', 'interval', 'one_time', name='schedule_type'),
               existing_nullable=False,
               existing_server_default=sa.text("'cron'::schedule_type"))
    op.alter_column('job_schedules', 'schedule_uuid',
               existing_type=sa.UUID(),
               nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.drop_column('job_schedules', 'last_run')
    op.drop_column('job_schedules', 'next_run')
    op.drop_column('job_schedules', 'execution_count')
    op.drop_column('job_schedules', 'max_executions')
    op.drop_column('job_schedules', 'day_of_month')
    op.drop_column('job_schedules', 'days_of_week')
    op.drop_column('job_schedules', 'time')
    op.drop_column('job_schedules', 'interval')
    op.drop_column('job_schedules', 'recurring_type')
    op.drop_column('job_schedules', 'execute_at')
    op.drop_column('job_schedules', 'enabled')
    op.create_table_comment(
        'job_executions',
        'Execution instances of jobs',
        existing_comment=None,
        schema=None
    )
    op.drop_constraint(None, 'job_executions', type_='foreignkey')
    op.create_foreign_key('job_executions_job_id_fkey', 'job_executions', 'jobs', ['job_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_job_executions_id'), table_name='job_executions')
    op.drop_index(op.f('ix_job_executions_execution_uuid'), table_name='job_executions')
    op.drop_index(op.f('ix_job_executions_execution_serial'), table_name='job_executions')
    op.create_unique_constraint('job_executions_execution_uuid_key', 'job_executions', ['execution_uuid'])
    op.create_unique_constraint('job_executions_execution_serial_key', 'job_executions', ['execution_serial'])
    op.create_index('idx_job_executions_status', 'job_executions', ['status'], unique=False)
    op.create_index('idx_job_executions_job_id_status', 'job_executions', ['job_id', 'status"], unique=False)
    op.create_index('idx_job_executions_job_id', 'job_executions', ['job_id'], unique=False)
    op.create_index('idx_job_executions_execution_uuid', 'job_executions', ['execution_uuid'], unique=False)
    op.create_index('idx_job_executions_execution_serial', 'job_executions', ['execution_serial'], unique=False)
    op.create_index('idx_job_executions_created_at', 'job_executions', ['created_at'], unique=False)
    op.create_table_comment(
        'job_execution_logs',
        'Comprehensive logging with taxonomy-based categorization',
        existing_comment=None,
        schema=None
    )
    op.drop_constraint(None, 'job_execution_logs', type_='foreignkey')
    op.drop_constraint(None, 'job_execution_logs', type_='foreignkey')
    op.create_foreign_key('job_execution_logs_job_execution_id_fkey', 'job_execution_logs', 'job_executions', ['job_execution_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key('job_execution_logs_branch_id_fkey', 'job_execution_logs', 'job_execution_branches', ['branch_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_job_execution_logs_id'), table_name='job_execution_logs')
    op.create_index('idx_job_execution_logs_timestamp_level', 'job_execution_logs', ['timestamp', 'log_level"], unique=False)
    op.create_index('idx_job_execution_logs_timestamp', 'job_execution_logs', ['timestamp'], unique=False)
    op.create_index('idx_job_execution_logs_phase', 'job_execution_logs', ['log_phase'], unique=False)
    op.create_index('idx_job_execution_logs_execution_id', 'job_execution_logs', ['job_execution_id'], unique=False)
    op.create_index('idx_job_execution_logs_category', 'job_execution_logs', ['log_category'], unique=False)
    op.create_index('idx_job_execution_logs_branch_id', 'job_execution_logs', ['branch_id'], unique=False)
    op.alter_column('job_execution_logs', 'log_details',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    # Fix enum type conversions with proper casting for downgrade
    op.execute("ALTER TABLE job_execution_logs ALTER COLUMN log_category TYPE log_category USING log_category::text::log_category")
    
    # Handle log_level with default value for downgrade
    op.execute("ALTER TABLE job_execution_logs ALTER COLUMN log_level DROP DEFAULT")
    op.execute("ALTER TABLE job_execution_logs ALTER COLUMN log_level TYPE log_level USING log_level::text::log_level")
    op.execute("ALTER TABLE job_execution_logs ALTER COLUMN log_level SET DEFAULT 'info'::log_level")
    
    op.execute("ALTER TABLE job_execution_logs ALTER COLUMN log_phase TYPE log_phase USING log_phase::text::log_phase")
    op.alter_column('job_execution_logs', 'job_execution_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.create_table_comment(
        'job_execution_branches',
        'Per-target execution tracking',
        existing_comment=None,
        schema=None
    )
    op.drop_constraint(None, 'job_execution_branches', type_='foreignkey')
    op.create_foreign_key('job_execution_branches_job_execution_id_fkey', 'job_execution_branches', 'job_executions', ['job_execution_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_job_execution_branches_target_serial_ref'), table_name='job_execution_branches')
    op.drop_index(op.f('ix_job_execution_branches_id'), table_name='job_execution_branches')
    op.drop_index(op.f('ix_job_execution_branches_branch_uuid'), table_name='job_execution_branches')
    op.drop_index(op.f('ix_job_execution_branches_branch_serial'), table_name='job_execution_branches')
    op.create_unique_constraint('job_execution_branches_branch_uuid_key', 'job_execution_branches', ['branch_uuid'])
    op.create_unique_constraint('job_execution_branches_branch_serial_key', 'job_execution_branches', ['branch_serial'])
    op.create_index('idx_job_execution_branches_target_serial_ref', 'job_execution_branches', ['target_serial_ref'], unique=False)
    op.create_index('idx_job_execution_branches_target_id', 'job_execution_branches', ['target_id'], unique=False)
    op.create_index('idx_job_execution_branches_status', 'job_execution_branches', ['status'], unique=False)
    op.create_index('idx_job_execution_branches_execution_status', 'job_execution_branches', ['job_execution_id', 'status"], unique=False)
    op.create_index('idx_job_execution_branches_execution_id', 'job_execution_branches', ['job_execution_id'], unique=False)
    op.create_index('idx_job_execution_branches_branch_uuid', 'job_execution_branches', ['branch_uuid'], unique=False)
    op.create_index('idx_job_execution_branches_branch_serial', 'job_execution_branches', ['branch_serial'], unique=False)
    op.create_table_comment(
        'job_actions',
        'Individual actions within jobs (commands, scripts, etc.)',
        existing_comment=None,
        schema=None
    )
    op.drop_constraint(None, 'job_actions', type_='foreignkey')
    op.create_foreign_key('job_actions_job_id_fkey', 'job_actions', 'jobs', ['job_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_job_actions_id'), table_name='job_actions')
    op.create_index('idx_job_actions_order', 'job_actions', ['job_id', 'action_order"], unique=False)
    op.create_index('idx_job_actions_job_id', 'job_actions', ['job_id'], unique=False)
    op.alter_column('job_actions', 'action_config',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('job_actions', 'action_parameters',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.create_index('idx_job_action_results_branch_id', 'job_action_results', ['branch_id'], unique=False)
    op.create_index('idx_job_action_results_action_id', 'job_action_results', ['action_id'], unique=False)
    op.drop_constraint(None, 'generated_reports', type_='foreignkey')
    op.drop_constraint(None, 'generated_reports', type_='foreignkey')
    op.create_foreign_key('generated_reports_generated_by_fkey', 'generated_reports', 'users', ['generated_by'], ['id'], ondelete='SET NULL')
    op.create_foreign_key('generated_reports_template_id_fkey', 'generated_reports', 'report_templates', ['template_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_generated_reports_id'), table_name='generated_reports')
    op.create_index('idx_generated_reports_template', 'generated_reports', ['template_id'], unique=False)
    op.create_index('idx_generated_reports_period', 'generated_reports', ['report_period_start', 'report_period_end"], unique=False)
    op.create_index('idx_generated_reports_generated_by', 'generated_reports', ['generated_by'], unique=False)
    op.alter_column('generated_reports', 'template_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.add_column('discovery_templates', sa.Column('discovery_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
    op.add_column('discovery_templates', sa.Column('template_uuid', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False))
    op.add_column('discovery_templates', sa.Column('template_config', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('discovery_templates', sa.Column('template_serial', sa.VARCHAR(length=50), server_default=sa.text("('TMPL-'::text || lpad((nextval('discovery_templates_id_seq'::regclass))::text, 8, '0'::text))"), autoincrement=False, nullable=False))
    op.drop_index(op.f('ix_discovery_templates_name'), table_name='discovery_templates')
    op.drop_index(op.f('ix_discovery_templates_id'), table_name='discovery_templates')
    op.create_index('idx_discovery_templates_template_uuid', 'discovery_templates', ['template_uuid'], unique=False)
    op.create_index('idx_discovery_templates_template_serial', 'discovery_templates', ['template_serial'], unique=False)
    op.create_index('idx_discovery_templates_is_active', 'discovery_templates', ['is_active'], unique=False)
    op.create_index('idx_discovery_templates_discovery_type', 'discovery_templates', ['discovery_type'], unique=False)
    op.create_index('idx_discovery_templates_created_by', 'discovery_templates', ['created_by'], unique=False)
    op.create_unique_constraint('discovery_templates_template_uuid_key', 'discovery_templates', ['template_uuid'])
    op.create_unique_constraint('discovery_templates_template_serial_key', 'discovery_templates', ['template_serial'])
    op.alter_column('discovery_templates', 'created_by',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('discovery_templates', 'name',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=255),
               existing_nullable=False)
    op.drop_column('discovery_templates', 'is_default')
    op.drop_column('discovery_templates', 'enable_hostname_resolution')
    op.drop_column('discovery_templates', 'enable_service_detection')
    op.drop_column('discovery_templates', 'enable_snmp')
    op.drop_column('discovery_templates', 'snmp_communities')
    op.drop_column('discovery_templates', 'max_concurrent')
    op.drop_column('discovery_templates', 'timeout')
    op.drop_column('discovery_templates', 'common_ports')
    op.drop_column('discovery_templates', 'port_ranges')
    op.drop_column('discovery_templates', 'network_ranges')
    op.add_column('discovery_schedules', sa.Column('schedule_serial', sa.VARCHAR(length=50), server_default=sa.text("('SCHED-'::text || lpad((nextval('discovery_schedules_id_seq'::regclass))::text, 8, '0'::text))"), autoincrement=False, nullable=False))
    op.add_column('discovery_schedules', sa.Column('next_run', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('discovery_schedules', sa.Column('schedule_uuid', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False))
    op.add_column('discovery_schedules', sa.Column('last_run', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'discovery_schedules', type_='foreignkey')
    op.create_foreign_key('discovery_schedules_template_id_fkey', 'discovery_schedules', 'discovery_templates', ['template_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_discovery_schedules_name'), table_name='discovery_schedules')
    op.drop_index(op.f('ix_discovery_schedules_id'), table_name='discovery_schedules')
    op.create_index('idx_discovery_schedules_template_id', 'discovery_schedules', ['template_id'], unique=False)
    op.create_index('idx_discovery_schedules_schedule_uuid', 'discovery_schedules', ['schedule_uuid'], unique=False)
    op.create_index('idx_discovery_schedules_schedule_serial', 'discovery_schedules', ['schedule_serial'], unique=False)
    op.create_index('idx_discovery_schedules_next_run', 'discovery_schedules', ['next_run'], unique=False)
    op.create_index('idx_discovery_schedules_is_active', 'discovery_schedules', ['is_active'], unique=False)
    op.create_index('idx_discovery_schedules_created_by', 'discovery_schedules', ['created_by'], unique=False)
    op.create_unique_constraint('discovery_schedules_schedule_uuid_key', 'discovery_schedules', ['schedule_uuid'])
    op.create_unique_constraint('discovery_schedules_schedule_serial_key', 'discovery_schedules', ['schedule_serial'])
    op.alter_column('discovery_schedules', 'created_by',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('discovery_schedules', 'name',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=255),
               existing_nullable=False)
    op.drop_column('discovery_schedules', 'next_run_at')
    op.drop_column('discovery_schedules', 'last_run_at')
    op.drop_column('discovery_schedules', 'timezone')
    op.add_column('discovery_jobs', sa.Column('discovery_type', sa.VARCHAR(length=50), server_default=sa.text("'network_scan'::character varying"), autoincrement=False, nullable=False))
    op.add_column('discovery_jobs', sa.Column('discovered_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True))
    op.add_column('discovery_jobs', sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('discovery_jobs', sa.Column('discovery_serial', sa.VARCHAR(length=50), server_default=sa.text("('DISC-'::text || lpad((nextval('discovery_jobs_id_seq'::regclass))::text, 8, '0'::text))"), autoincrement=False, nullable=False))
    op.add_column('discovery_jobs', sa.Column('discovery_config', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('discovery_jobs', sa.Column('discovery_uuid', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False))
    op.add_column('discovery_jobs', sa.Column('target_range', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.add_column('discovery_jobs', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_discovery_jobs_status'), table_name='discovery_jobs')
    op.drop_index(op.f('ix_discovery_jobs_name'), table_name='discovery_jobs')
    op.drop_index(op.f('ix_discovery_jobs_id'), table_name='discovery_jobs')
    op.create_index('idx_discovery_jobs_status', 'discovery_jobs', ['status'], unique=False)
    op.create_index('idx_discovery_jobs_discovery_uuid', 'discovery_jobs', ['discovery_uuid'], unique=False)
    op.create_index('idx_discovery_jobs_discovery_serial', 'discovery_jobs', ['discovery_serial'], unique=False)
    op.create_index('idx_discovery_jobs_created_by', 'discovery_jobs', ['created_by'], unique=False)
    op.create_unique_constraint('discovery_jobs_discovery_uuid_key', 'discovery_jobs', ['discovery_uuid'])
    op.create_unique_constraint('discovery_jobs_discovery_serial_key', 'discovery_jobs', ['discovery_serial'])
    op.alter_column('discovery_jobs', 'created_by',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('discovery_jobs', 'status',
               existing_type=sa.String(length=20),
               type_=sa.VARCHAR(length=50),
               nullable=False,
               existing_server_default=sa.text("'pending'::character varying"))
    op.alter_column('discovery_jobs', 'name',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=255),
               existing_nullable=False)
    op.drop_column('discovery_jobs', 'devices_discovered')
    op.drop_column('discovery_jobs', 'total_ips_scanned')
    op.drop_column('discovery_jobs', 'progress')
    op.drop_column('discovery_jobs', 'enable_hostname_resolution')
    op.drop_column('discovery_jobs', 'enable_service_detection')
    op.drop_column('discovery_jobs', 'enable_snmp')
    op.drop_column('discovery_jobs', 'snmp_communities')
    op.drop_column('discovery_jobs', 'max_concurrent')
    op.drop_column('discovery_jobs', 'timeout')
    op.drop_column('discovery_jobs', 'common_ports')
    op.drop_column('discovery_jobs', 'port_ranges')
    op.drop_column('discovery_jobs', 'network_ranges')
    op.add_column('discovered_devices', sa.Column('model', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('discovered_devices', sa.Column('os_version', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('discovered_devices', sa.Column('last_seen', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True))
    op.add_column('discovered_devices', sa.Column('vendor', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('discovered_devices', sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True))
    op.add_column('discovered_devices', sa.Column('raw_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('discovered_devices', sa.Column('device_serial', sa.VARCHAR(length=50), server_default=sa.text("('DEV-'::text || lpad((nextval('discovered_devices_id_seq'::regclass))::text, 8, '0'::text))"), autoincrement=False, nullable=False))
    op.add_column('discovered_devices', sa.Column('is_reachable', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True))
    op.add_column('discovered_devices', sa.Column('device_uuid', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False))
    op.add_column('discovered_devices', sa.Column('ports', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('discovered_devices', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('discovered_devices', sa.Column('discovery_method', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'discovered_devices', type_='foreignkey')
    op.drop_constraint(None, 'discovered_devices', type_='foreignkey')
    op.drop_constraint(None, 'discovered_devices', type_='foreignkey')
    op.create_foreign_key('discovered_devices_discovery_job_id_fkey', 'discovered_devices', 'discovery_jobs', ['discovery_job_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_discovered_devices_target_id'), table_name='discovered_devices')
    op.drop_index(op.f('ix_discovered_devices_status'), table_name='discovered_devices')
    op.drop_index(op.f('ix_discovered_devices_os_type'), table_name='discovered_devices')
    op.drop_index(op.f('ix_discovered_devices_mac_address'), table_name='discovered_devices')
    op.drop_index(op.f('ix_discovered_devices_ip_address'), table_name='discovered_devices')
    op.drop_index(op.f('ix_discovered_devices_id'), table_name='discovered_devices')
    op.drop_index(op.f('ix_discovered_devices_hostname'), table_name='discovered_devices')
    op.drop_index(op.f('ix_discovered_devices_discovery_job_id'), table_name='discovered_devices')
    op.drop_index(op.f('ix_discovered_devices_device_type'), table_name='discovered_devices')
    op.create_index('idx_discovered_devices_ip_address', 'discovered_devices', ['ip_address'], unique=False)
    op.create_index('idx_discovered_devices_hostname', 'discovered_devices', ['hostname'], unique=False)
    op.create_index('idx_discovered_devices_discovery_job_id', 'discovered_devices', ['discovery_job_id'], unique=False)
    op.create_index('idx_discovered_devices_device_uuid', 'discovered_devices', ['device_uuid'], unique=False)
    op.create_index('idx_discovered_devices_device_type', 'discovered_devices', ['device_type'], unique=False)
    op.create_index('idx_discovered_devices_device_serial', 'discovered_devices', ['device_serial'], unique=False)
    op.create_unique_constraint('discovered_devices_device_uuid_key', 'discovered_devices', ['device_uuid'])
    op.create_unique_constraint('discovered_devices_device_serial_key', 'discovered_devices', ['device_serial'])
    op.alter_column('discovered_devices', 'device_type',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=100),
               existing_nullable=True)
    op.alter_column('discovered_devices', 'services',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('discovered_devices', 'ip_address',
               existing_type=sa.String(length=45),
               type_=postgresql.INET(),
               existing_nullable=False)
    op.drop_column('discovered_devices', 'discovered_at')
    op.drop_column('discovered_devices', 'imported_by')
    op.drop_column('discovered_devices', 'imported_at')
    op.drop_column('discovered_devices', 'target_id')
    op.drop_column('discovered_devices', 'status')
    op.drop_column('discovered_devices', 'suggested_communication_methods')
    op.drop_column('discovered_devices', 'confidence_score')
    op.drop_column('discovered_devices', 'snmp_info')
    op.drop_column('discovered_devices', 'open_ports')
    op.create_index('idx_device_types_created_by', 'device_types', ['created_by'], unique=False)
    op.create_index('idx_device_type_usage_user_id', 'device_type_usage', ['user_id'], unique=False)
    op.create_index('idx_device_type_templates_created_by', 'device_type_templates', ['created_by'], unique=False)
    op.add_column('celery_task_history', sa.Column('runtime_seconds', sa.NUMERIC(precision=10, scale=3), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_celery_task_history_id'), table_name='celery_task_history')
    op.create_index('idx_celery_task_history_worker', 'celery_task_history', ['worker'], unique=False)
    op.create_index('idx_celery_task_history_task_uuid', 'celery_task_history', ['task_uuid'], unique=False)
    op.create_index('idx_celery_task_history_task_serial', 'celery_task_history', ['task_serial'], unique=False)
    op.create_index('idx_celery_task_history_task_name', 'celery_task_history', ['task_name'], unique=False)
    op.create_index('idx_celery_task_history_task_id', 'celery_task_history', ['task_id'], unique=False)
    op.create_index('idx_celery_task_history_status', 'celery_task_history', ['status'], unique=False)
    op.create_index('idx_celery_task_history_started_at', 'celery_task_history', ['started_at'], unique=False)
    op.create_index('idx_celery_task_history_queue', 'celery_task_history', ['queue'], unique=False)
    op.create_index('idx_celery_task_history_completed_at', 'celery_task_history', ['completed_at'], unique=False)
    op.create_unique_constraint('celery_task_history_task_uuid_key', 'celery_task_history', ['task_uuid'])
    op.create_unique_constraint('celery_task_history_task_serial_key', 'celery_task_history', ['task_serial'])
    op.create_unique_constraint('celery_task_history_task_id_key', 'celery_task_history', ['task_id'])
    op.drop_index(op.f('ix_celery_metrics_snapshots_id'), table_name='celery_metrics_snapshots')
    op.create_index('idx_celery_metrics_snapshots_worker_name', 'celery_metrics_snapshots', ['worker_name'], unique=False)
    op.create_index('idx_celery_metrics_snapshots_snapshot_uuid', 'celery_metrics_snapshots', ['snapshot_uuid'], unique=False)
    op.create_index('idx_celery_metrics_snapshots_snapshot_time', 'celery_metrics_snapshots', ['snapshot_time'], unique=False)
    op.create_index('idx_celery_metrics_snapshots_snapshot_serial', 'celery_metrics_snapshots', ['snapshot_serial'], unique=False)
    op.create_unique_constraint('celery_metrics_snapshots_snapshot_uuid_key', 'celery_metrics_snapshots', ['snapshot_uuid'])
    op.create_unique_constraint('celery_metrics_snapshots_snapshot_serial_key', 'celery_metrics_snapshots', ['snapshot_serial'])
    op.alter_column('analytics_alert_rules', 'notification_channels',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=True)
    op.drop_index(op.f('ix_alert_rules_id'), table_name='alert_rules')
    op.create_index('idx_alert_rules_active', 'alert_rules', ['is_active'], unique=False)
    op.add_column('alert_logs', sa.Column('is_resolved', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'alert_logs', type_='foreignkey')
    op.create_foreign_key('alert_logs_alert_rule_id_fkey', 'alert_logs', 'alert_rules', ['alert_rule_id'], ['id'], ondelete='SET NULL')
    op.drop_index(op.f('ix_alert_logs_id'), table_name='alert_logs')
    op.create_index('idx_alert_logs_alert_rule_id', 'alert_logs', ['alert_rule_id'], unique=False)
    op.create_unique_constraint('alert_logs_alert_uuid_key', 'alert_logs', ['alert_uuid'])
    op.create_unique_constraint('alert_logs_alert_serial_key', 'alert_logs', ['alert_serial'])
    # ### end Alembic commands ###

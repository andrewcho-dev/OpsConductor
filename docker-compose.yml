# =============================================================================
# OPSCONDUCTOR - UNIVERSAL AUTOMATION ORCHESTRATION PLATFORM
# =============================================================================
# Complete Docker Compose setup for OpsConductor platform
# All services run behind nginx with SSL termination
# Access: https://localhost or https://your-server-ip

name: opsconductor

services:
  # =============================================================================
  # DATABASE - PostgreSQL
  # =============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: opsconductor-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - opsconductor-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =============================================================================
  # CACHE - Redis
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: opsconductor-redis
    networks:
      - opsconductor-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5



  # =============================================================================
  # AUTH DATABASE - PostgreSQL
  # =============================================================================
  auth-postgres:
    image: postgres:15-alpine
    container_name: opsconductor-auth-postgres
    environment:
      POSTGRES_DB: ${AUTH_POSTGRES_DB:-auth_db}
      POSTGRES_USER: ${AUTH_POSTGRES_USER:-auth_user}
      POSTGRES_PASSWORD: ${AUTH_POSTGRES_PASSWORD:-auth_password}
    volumes:
      - auth_postgres_data:/var/lib/postgresql/data
      - ./services/auth-service/database:/docker-entrypoint-initdb.d
    networks:
      - opsconductor-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${AUTH_POSTGRES_USER:-auth_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =============================================================================
  # USER DATABASE - PostgreSQL
  # =============================================================================
  user-postgres:
    image: postgres:15-alpine
    container_name: opsconductor-user-postgres
    environment:
      POSTGRES_DB: ${USER_POSTGRES_DB:-user_db}
      POSTGRES_USER: ${USER_POSTGRES_USER:-user_user}
      POSTGRES_PASSWORD: ${USER_POSTGRES_PASSWORD:-user_password}
    volumes:
      - user_postgres_data:/var/lib/postgresql/data
      - ./services/user-service/database:/docker-entrypoint-initdb.d
    networks:
      - opsconductor-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${USER_POSTGRES_USER:-user_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =============================================================================
  # TARGETS DATABASE - PostgreSQL
  # =============================================================================
  targets-postgres:
    image: postgres:15-alpine
    container_name: opsconductor-targets-postgres
    environment:
      POSTGRES_DB: ${TARGETS_POSTGRES_DB:-targets_db}
      POSTGRES_USER: ${TARGETS_POSTGRES_USER:-targets_user}
      POSTGRES_PASSWORD: ${TARGETS_POSTGRES_PASSWORD:-targets_password}
    volumes:
      - targets_postgres_data:/var/lib/postgresql/data
      - ./services/targets-service/database:/docker-entrypoint-initdb.d
    networks:
      - opsconductor-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${TARGETS_POSTGRES_USER:-targets_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =============================================================================
  # JOBS DATABASE - PostgreSQL
  # =============================================================================
  jobs-postgres:
    image: postgres:15-alpine
    container_name: opsconductor-jobs-postgres
    environment:
      POSTGRES_DB: ${JOBS_POSTGRES_DB:-jobs_db}
      POSTGRES_USER: ${JOBS_POSTGRES_USER:-jobs_user}
      POSTGRES_PASSWORD: ${JOBS_POSTGRES_PASSWORD:-jobs_password}
    volumes:
      - jobs_postgres_data:/var/lib/postgresql/data
      - ./services/jobs-service/database:/docker-entrypoint-initdb.d
    networks:
      - opsconductor-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${JOBS_POSTGRES_USER:-jobs_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =============================================================================
  # EXECUTION DATABASE - PostgreSQL
  # =============================================================================
  execution-postgres:
    image: postgres:15-alpine
    container_name: opsconductor-execution-postgres
    environment:
      POSTGRES_DB: ${EXECUTION_POSTGRES_DB:-execution_db}
      POSTGRES_USER: ${EXECUTION_POSTGRES_USER:-execution_user}
      POSTGRES_PASSWORD: ${EXECUTION_POSTGRES_PASSWORD:-execution_password}
    volumes:
      - execution_postgres_data:/var/lib/postgresql/data
      - ./services/execution-service/database:/docker-entrypoint-initdb.d
    networks:
      - opsconductor-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${EXECUTION_POSTGRES_USER:-execution_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =============================================================================
  # AUDIT EVENTS DATABASE - PostgreSQL
  # =============================================================================
  audit-postgres:
    image: postgres:15-alpine
    container_name: opsconductor-audit-postgres
    environment:
      POSTGRES_DB: ${AUDIT_POSTGRES_DB:-audit_db}
      POSTGRES_USER: ${AUDIT_POSTGRES_USER:-audit_user}
      POSTGRES_PASSWORD: ${AUDIT_POSTGRES_PASSWORD:-audit_password}
    volumes:
      - audit_postgres_data:/var/lib/postgresql/data
      - ./services/audit-events-service/database:/docker-entrypoint-initdb.d
    networks:
      - opsconductor-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${AUDIT_POSTGRES_USER:-audit_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =============================================================================
  # NOTIFICATION DATABASE - PostgreSQL
  # =============================================================================
  notification-postgres:
    image: postgres:15-alpine
    container_name: opsconductor-notification-postgres
    environment:
      POSTGRES_DB: ${NOTIFICATION_POSTGRES_DB:-notification_db}
      POSTGRES_USER: ${NOTIFICATION_POSTGRES_USER:-notification_user}
      POSTGRES_PASSWORD: ${NOTIFICATION_POSTGRES_PASSWORD:-notification_password}
    volumes:
      - notification_postgres_data:/var/lib/postgresql/data
      - ./services/notification-service/database:/docker-entrypoint-initdb.d
    networks:
      - opsconductor-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${NOTIFICATION_POSTGRES_USER:-notification_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =============================================================================
  # AUTH SERVICE - FastAPI (Authentication Only)
  # =============================================================================
  auth-service:
    build:
      context: ./services
      dockerfile: auth-service/Dockerfile
    container_name: opsconductor-auth-service
    environment:
      - DATABASE_URL=postgresql://${AUTH_POSTGRES_USER:-auth_user}:${AUTH_POSTGRES_PASSWORD:-auth_password}@auth-postgres:5432/${AUTH_POSTGRES_DB:-auth_db}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES}
      - REFRESH_TOKEN_EXPIRE_DAYS=${REFRESH_TOKEN_EXPIRE_DAYS}
      - SESSION_TIMEOUT_MINUTES=${SESSION_TIMEOUT_MINUTES:-480}
      - SESSION_WARNING_MINUTES=${SESSION_WARNING_MINUTES:-2}
      - USER_SERVICE_URL=http://user-service:8000
      - API_BASE_PATH=/api/v1
      - ENVIRONMENT=${ENVIRONMENT}
      - DEBUG=${DEBUG:-false}
    networks:
      - opsconductor-network
    depends_on:
      auth-postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    ports:
      - "8001:8000"
    healthcheck:
      test: ["CMD", "python3", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # USER SERVICE - FastAPI (User Management Only)
  # =============================================================================
  user-service:
    build:
      context: ./services
      dockerfile: user-service/Dockerfile
    container_name: opsconductor-user-service
    environment:
      - DATABASE_URL=postgresql://${USER_POSTGRES_USER:-user_user}:${USER_POSTGRES_PASSWORD:-user_password}@user-postgres:5432/${USER_POSTGRES_DB:-user_db}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
      - AUTH_SERVICE_URL=http://auth-service:8000
      - AUDIT_EVENTS_SERVICE_URL=http://audit-events-service:8000
      - API_BASE_PATH=/api/v1
      - ENVIRONMENT=${ENVIRONMENT}
      - DEBUG=${DEBUG:-false}
    networks:
      - opsconductor-network
    depends_on:
      user-postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    ports:
      - "8002:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "--max-time", "5", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # TARGETS SERVICE - FastAPI (Target Management)
  # =============================================================================
  targets-service:
    build:
      context: ./services
      dockerfile: targets-service/Dockerfile
    container_name: opsconductor-targets-service
    environment:
      - DATABASE_URL=postgresql://${TARGETS_POSTGRES_USER:-targets_user}:${TARGETS_POSTGRES_PASSWORD:-targets_password}@targets-postgres:5432/${TARGETS_POSTGRES_DB:-targets_db}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
      - AUTH_SERVICE_URL=http://auth-service:8000
      - USER_SERVICE_URL=http://user-service:8000
      - AUDIT_EVENTS_SERVICE_URL=http://audit-events-service:8000
      - TARGET_DISCOVERY_SERVICE_URL=http://target-discovery-service:8000
      - API_BASE_PATH=/api/v1
      - ENVIRONMENT=${ENVIRONMENT}
      - DEBUG=${DEBUG:-false}
    networks:
      - opsconductor-network
    depends_on:
      targets-postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    restart: unless-stopped
    ports:
      - "8003:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "--max-time", "5", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # JOBS SERVICE - FastAPI (Job Management)
  # =============================================================================
  jobs-service:
    build:
      context: ./services
      dockerfile: jobs-service/Dockerfile
    container_name: opsconductor-jobs-service
    environment:
      - DATABASE_URL=postgresql://${JOBS_POSTGRES_USER:-jobs_user}:${JOBS_POSTGRES_PASSWORD:-jobs_password}@jobs-postgres:5432/${JOBS_POSTGRES_DB:-jobs_db}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
      - AUTH_SERVICE_URL=http://auth-service:8000
      - USER_SERVICE_URL=http://user-service:8000
      - TARGETS_SERVICE_URL=http://targets-service:8000
      - EXECUTION_SERVICE_URL=http://execution-service:8000
      - AUDIT_EVENTS_SERVICE_URL=http://audit-events-service:8000
      - JOB_SCHEDULING_SERVICE_URL=http://job-scheduling-service:8000
      - API_BASE_PATH=/api/v1
      - ENVIRONMENT=${ENVIRONMENT}
      - DEBUG=${DEBUG:-false}
    networks:
      - opsconductor-network
    depends_on:
      jobs-postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    restart: unless-stopped
    ports:
      - "8004:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "--max-time", "5", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # EXECUTION SERVICE - FastAPI (Job Execution)
  # =============================================================================
  execution-service:
    build:
      context: ./services
      dockerfile: execution-service/Dockerfile
    container_name: opsconductor-execution-service
    environment:
      - DATABASE_URL=postgresql://${EXECUTION_POSTGRES_USER:-execution_user}:${EXECUTION_POSTGRES_PASSWORD:-execution_password}@execution-postgres:5432/${EXECUTION_POSTGRES_DB:-execution_db}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
      - AUTH_SERVICE_URL=http://auth-service:8000
      - USER_SERVICE_URL=http://user-service:8000
      - TARGETS_SERVICE_URL=http://targets-service:8000
      - JOBS_SERVICE_URL=http://jobs-service:8000
      - AUDIT_EVENTS_SERVICE_URL=http://audit-events-service:8000
      # Object Storage Configuration
      - MINIO_ENDPOINT=${MINIO_ENDPOINT:-http://minio:9000}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY:-opsconductor}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY:-opsconductor_minio_2024_secure}
      - MINIO_SECURE=${MINIO_SECURE:-false}
      - MINIO_REGION=${MINIO_REGION:-us-east-1}
      - OBJECT_STORAGE_ENABLED=${OBJECT_STORAGE_ENABLED:-true}
      - OBJECT_STORAGE_BUCKET_PREFIX=${OBJECT_STORAGE_BUCKET_PREFIX:-opsconductor}
      - OBJECT_STORAGE_SIZE_THRESHOLD=${OBJECT_STORAGE_SIZE_THRESHOLD:-64KB}
      - API_BASE_PATH=/api/v1
      - ENVIRONMENT=${ENVIRONMENT}
      - DEBUG=${DEBUG:-false}
      - MAX_CONCURRENT_EXECUTIONS=${MAX_CONCURRENT_EXECUTIONS:-10}
      - CONNECTION_TIMEOUT=${CONNECTION_TIMEOUT:-30}
      - COMMAND_TIMEOUT=${COMMAND_TIMEOUT:-300}
    networks:
      - opsconductor-network
    depends_on:
      execution-postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped
    ports:
      - "8005:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "--max-time", "5", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # AUDIT EVENTS SERVICE - FastAPI (Audit Logging)
  # =============================================================================
  audit-events-service:
    build:
      context: ./services
      dockerfile: audit-events-service/Dockerfile
    container_name: opsconductor-audit-events-service
    environment:
      - DATABASE_URL=postgresql://${AUDIT_POSTGRES_USER:-audit_user}:${AUDIT_POSTGRES_PASSWORD:-audit_password}@audit-postgres:5432/${AUDIT_POSTGRES_DB:-audit_db}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
      - AUTH_SERVICE_URL=http://auth-service:8000
      - API_BASE_PATH=/api/v1
      - ENVIRONMENT=${ENVIRONMENT}
      - DEBUG=${DEBUG:-false}
    networks:
      - opsconductor-network
    depends_on:
      audit-postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    ports:
      - "8006:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "--max-time", "5", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # NOTIFICATION SERVICE - FastAPI (Notifications)
  # =============================================================================
  notification-service:
    build:
      context: ./services
      dockerfile: notification-service/Dockerfile
    container_name: opsconductor-notification-service
    environment:
      - DATABASE_URL=postgresql://${NOTIFICATION_POSTGRES_USER:-notification_user}:${NOTIFICATION_POSTGRES_PASSWORD:-notification_password}@notification-postgres:5432/${NOTIFICATION_POSTGRES_DB:-notification_db}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
      - AUTH_SERVICE_URL=http://auth-service:8000
      - USER_SERVICE_URL=http://user-service:8000
      - AUDIT_EVENTS_SERVICE_URL=http://audit-events-service:8000
      - API_BASE_PATH=/api/v1
      - ENVIRONMENT=${ENVIRONMENT}
      - DEBUG=${DEBUG:-false}
    networks:
      - opsconductor-network
    depends_on:
      notification-postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    ports:
      - "8007:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "--max-time", "5", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # TARGET DISCOVERY SERVICE - FastAPI (Auto Discovery)
  # =============================================================================
  target-discovery-service:
    build:
      context: ./services
      dockerfile: target-discovery-service/Dockerfile
    container_name: opsconductor-target-discovery-service
    environment:
      - DATABASE_URL=postgresql://${TARGETS_POSTGRES_USER:-targets_user}:${TARGETS_POSTGRES_PASSWORD:-targets_password}@targets-postgres:5432/${TARGETS_POSTGRES_DB:-targets_db}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
      - AUTH_SERVICE_URL=http://auth-service:8000
      - TARGETS_SERVICE_URL=http://targets-service:8000
      - AUDIT_EVENTS_SERVICE_URL=http://audit-events-service:8000
      - API_BASE_PATH=/api/v1
      - ENVIRONMENT=${ENVIRONMENT}
      - DEBUG=${DEBUG:-false}
    networks:
      - opsconductor-network
    depends_on:
      targets-postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    ports:
      - "8008:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "--max-time", "5", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # JOB SCHEDULING SERVICE - FastAPI (Scheduling)
  # =============================================================================
  job-scheduling-service:
    build:
      context: ./services
      dockerfile: job-scheduling-service/Dockerfile
    container_name: opsconductor-job-scheduling-service
    environment:
      - DATABASE_URL=postgresql://${JOBS_POSTGRES_USER:-jobs_user}:${JOBS_POSTGRES_PASSWORD:-jobs_password}@jobs-postgres:5432/${JOBS_POSTGRES_DB:-jobs_db}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
      - AUTH_SERVICE_URL=http://auth-service:8000
      - JOBS_SERVICE_URL=http://jobs-service:8000
      - EXECUTION_SERVICE_URL=http://execution-service:8000
      - API_BASE_PATH=/api/v1
      - ENVIRONMENT=${ENVIRONMENT}
      - DEBUG=${DEBUG:-false}
    networks:
      - opsconductor-network
    depends_on:
      jobs-postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    ports:
      - "8009:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "--max-time", "5", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # JOB MANAGEMENT SERVICE - FastAPI (Job Lifecycle)
  # =============================================================================
  job-management-service:
    build:
      context: ./services
      dockerfile: job-management-service/Dockerfile
    container_name: opsconductor-job-management-service
    environment:
      - DATABASE_URL=postgresql://${JOBS_POSTGRES_USER:-jobs_user}:${JOBS_POSTGRES_PASSWORD:-jobs_password}@jobs-postgres:5432/${JOBS_POSTGRES_DB:-jobs_db}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
      - AUTH_SERVICE_URL=http://auth-service:8000
      - JOBS_SERVICE_URL=http://jobs-service:8000
      - EXECUTION_SERVICE_URL=http://execution-service:8000
      - JOB_SCHEDULING_SERVICE_URL=http://job-scheduling-service:8000
      - TARGETS_SERVICE_URL=http://targets-service:8000
      - USER_SERVICE_URL=http://user-service:8000
      - AUDIT_EVENTS_SERVICE_URL=http://audit-events-service:8000
      - API_BASE_PATH=/api/v1
      - ENVIRONMENT=${ENVIRONMENT}
      - DEBUG=${DEBUG:-false}
    networks:
      - opsconductor-network
    depends_on:
      jobs-postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    ports:
      - "8010:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "--max-time", "5", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # API GATEWAY - Nginx (Microservices Routing)
  # =============================================================================
  api-gateway:
    build:
      context: ./services
      dockerfile: api-gateway/Dockerfile
    container_name: opsconductor-api-gateway
    ports:
      - "8080:80"
    networks:
      - opsconductor-network
    depends_on:
      - auth-service
      - user-service
      - targets-service
      - jobs-service
      - execution-service
      - audit-events-service
      - notification-service
      - target-discovery-service
      - job-scheduling-service
      - job-management-service
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # LEGACY BACKEND - RETIRED (August 22, 2025)
  # =============================================================================
  # The legacy monolithic backend has been fully retired and replaced by microservices
  # All functionality is now handled by dedicated services:
  # - Authentication → auth-service
  # - User Management → user-service  
  # - Target Management → targets-service
  # - Job Management → jobs-service
  # - Job Execution → execution-service + workers
  # - Audit Logging → audit-events-service
  # - Target Discovery → target-discovery-service
  # - Notifications → notification-service
  #
  # Legacy code archived at: /archive/legacy-backend-20250822/
  # Service definition commented out to prevent accidental startup

  # =============================================================================
  # FRONTEND - React Development Server
  # =============================================================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: opsconductor-frontend
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      - FAST_REFRESH=false
      - WDS_SOCKET_HOST=0.0.0.0
      - WDS_SOCKET_PORT=${FRONTEND_PORT}
      - HTTPS=false
      - REACT_APP_API_URL=${REACT_APP_API_URL}
      - REACT_APP_AUTH_URL=${REACT_APP_AUTH_URL}
      - REACT_APP_WS_URL=${REACT_APP_WS_URL}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - opsconductor-network
    ports:
      - "3000:3000"
    # Legacy backend dependency removed - frontend now connects to microservices via API gateway
    restart: unless-stopped
    stdin_open: true
    tty: true
    healthcheck:
      test: ["CMD", "curl", "-f", "--max-time", "5", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # LEGACY CELERY SERVICES - RETIRED (August 22, 2025)
  # =============================================================================
  # Legacy Celery worker and scheduler services have been retired
  # Background task processing is now handled by the distributed workers architecture:
  # - execution-worker: Handles job execution tasks
  # - system-worker: Handles system maintenance, discovery, and cleanup tasks  
  # - system-scheduler: Handles scheduled/periodic tasks (Celery Beat)
  #
  # These services run in the execution-service via docker-compose.workers.yml
  # Legacy services commented out to prevent conflicts with new architecture

  # =============================================================================
  # MINIO OBJECT STORAGE - S3-Compatible Storage for Job Artifacts
  # =============================================================================
  minio:
    image: minio/minio:latest
    container_name: opsconductor-minio
    command: server /data --console-address ":9090"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-opsconductor}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-opsconductor_minio_2024}
      - MINIO_BROWSER_REDIRECT_URL=https://localhost:9090
    ports:
      - "9001:9000"  # S3 API
      - "9090:9090"  # Web Console
    volumes:
      - minio_data:/data
    networks:
      - opsconductor-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # =============================================================================
  # PORTAINER - Docker Container Management
  # =============================================================================
  portainer:
    image: portainer/portainer-ce:latest
    container_name: opsconductor-portainer
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - opsconductor-network
    restart: unless-stopped
    # Note: Portainer CE doesn't include wget/curl, so we disable health check
    # The service is monitored through the OpsConductor Docker monitoring interface

  # =============================================================================
  # NGINX REVERSE PROXY - HTTPS ONLY & SSL TERMINATION
  # =============================================================================
  nginx:
    image: nginx:alpine
    container_name: opsconductor-nginx
    command: sh -c "apk add --no-cache curl && nginx -g 'daemon off;'"
    ports:
      - "${NGINX_HTTP_PORT}:80"
      - "${NGINX_HTTPS_PORT}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - opsconductor-network
    depends_on:
      - frontend
      # Legacy backend dependency removed - nginx now routes to microservices
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3




# =============================================================================
# NETWORKS & VOLUMES
# =============================================================================
networks:
  opsconductor-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  auth_postgres_data:
    driver: local
  user_postgres_data:
    driver: local
  targets_postgres_data:
    driver: local
  jobs_postgres_data:
    driver: local
  execution_postgres_data:
    driver: local
  audit_postgres_data:
    driver: local
  notification_postgres_data:
    driver: local
  minio_data:
    driver: local
  portainer_data:
    driver: local
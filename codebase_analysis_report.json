{
  "apis": {
    "v1": [
      {
        "path": "/home/enabledrm/backend/app/api/v1/celery_monitor.py",
        "classes": [],
        "functions": [
          "require_auth"
        ],
        "endpoints": [
          "GET /stats",
          "GET /workers",
          "GET /queues",
          "GET /metrics/history",
          "GET /health"
        ],
        "imports": [
          "fastapi.APIRouter",
          "fastapi.Depends",
          "fastapi.HTTPException",
          "fastapi.status",
          "fastapi.Query",
          "sqlalchemy.orm.Session",
          "typing.Dict",
          "typing.List",
          "typing.Any",
          "typing.Optional",
          "datetime.datetime",
          "datetime.timedelta",
          "logging",
          "celery.Celery",
          "celery.events.state.State",
          "redis",
          "json",
          "app.database.database.get_db",
          "app.core.security.verify_token",
          "app.core.logging.get_structured_logger",
          "fastapi.security.HTTPBearer",
          "celery.current_app",
          "redis",
          "app.models.celery_models.CeleryTaskHistory",
          "app.models.celery_models.CeleryTaskHistory",
          "datetime.timezone",
          "datetime.timezone"
        ],
        "decorators": []
      }
    ],
    "v2": [
      {
        "path": "/home/enabledrm/backend/app/api/v2/templates_enhanced.py",
        "classes": [
          "TemplateResponse",
          "TemplateCreateRequest",
          "Config",
          "Config"
        ],
        "functions": [],
        "endpoints": [],
        "imports": [
          "fastapi.APIRouter",
          "fastapi.Depends",
          "fastapi.HTTPException",
          "fastapi.status",
          "sqlalchemy.orm.Session",
          "datetime.datetime",
          "typing.List",
          "typing.Optional",
          "typing.Dict",
          "typing.Any",
          "pydantic.BaseModel",
          "pydantic.Field",
          "app.database.database.get_db",
          "app.core.security.verify_token",
          "app.core.logging.get_structured_logger"
        ],
        "decorators": []
      },
      {
        "path": "/home/enabledrm/backend/app/api/v2/audit_enhanced.py",
        "classes": [
          "AuditEventResponse",
          "AuditEventsListResponse",
          "AuditStatisticsResponse",
          "AuditSearchRequest",
          "AuditVerificationResponse",
          "ComplianceReportResponse",
          "AuditEventTypesResponse",
          "AuditErrorResponse",
          "UserLookupResponse",
          "TargetLookupResponse",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config"
        ],
        "functions": [
          "get_current_user",
          "require_audit_permissions",
          "require_admin_permissions",
          "validate_date_range"
        ],
        "endpoints": [],
        "imports": [
          "fastapi.APIRouter",
          "fastapi.Depends",
          "fastapi.HTTPException",
          "fastapi.status",
          "fastapi.Query",
          "fastapi.Request",
          "fastapi.security.HTTPBearer",
          "sqlalchemy.orm.Session",
          "datetime.datetime",
          "datetime.timezone",
          "datetime.timedelta",
          "typing.List",
          "typing.Optional",
          "typing.Dict",
          "typing.Any",
          "typing.Union",
          "pydantic.BaseModel",
          "pydantic.Field",
          "pydantic.validator",
          "app.services.audit_management_service.AuditManagementService",
          "app.services.audit_management_service.AuditManagementError",
          "app.database.database.get_db",
          "app.core.security.verify_token",
          "app.core.logging.get_structured_logger",
          "app.core.logging.RequestLogger",
          "app.domains.audit.services.audit_service.AuditEventType",
          "app.domains.audit.services.audit_service.AuditSeverity",
          "app.services.user_service.UserService",
          "app.services.user_service.UserService",
          "app.services.universal_target_service.UniversalTargetService"
        ],
        "decorators": []
      },
      {
        "path": "/home/enabledrm/backend/app/api/v2/websocket_enhanced.py",
        "classes": [
          "WebSocketConnectionResponse",
          "WebSocketMessageRequest",
          "WebSocketMessageResponse",
          "WebSocketStatisticsResponse",
          "WebSocketRoomInfo",
          "WebSocketUserActivity",
          "WebSocketErrorResponse",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config"
        ],
        "functions": [
          "validate_message_type"
        ],
        "endpoints": [],
        "imports": [
          "json",
          "asyncio",
          "fastapi.APIRouter",
          "fastapi.WebSocket",
          "fastapi.WebSocketDisconnect",
          "fastapi.Depends",
          "fastapi.HTTPException",
          "fastapi.status",
          "fastapi.Request",
          "fastapi.security.HTTPBearer",
          "sqlalchemy.orm.Session",
          "datetime.datetime",
          "typing.List",
          "typing.Optional",
          "typing.Dict",
          "typing.Any",
          "typing.Union",
          "pydantic.BaseModel",
          "pydantic.Field",
          "pydantic.validator",
          "app.services.websocket_management_service.WebSocketManagementService",
          "app.services.websocket_management_service.WebSocketManagementError",
          "app.database.database.get_db",
          "app.core.security.verify_token",
          "app.core.logging.get_structured_logger",
          "app.core.logging.RequestLogger"
        ],
        "decorators": []
      },
      {
        "path": "/home/enabledrm/backend/app/api/v2/jobs_enhanced.py",
        "classes": [
          "JobActionCreateV2",
          "JobCreateRequest",
          "JobResponse",
          "JobsListResponse",
          "JobExecutionRequest",
          "JobExecutionResponse",
          "JobStatisticsResponse",
          "JobScheduleRequest",
          "JobErrorResponse",
          "JobUpdateRequest",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config"
        ],
        "functions": [
          "get_current_user",
          "require_job_permissions",
          "validate_name",
          "validate_scheduled_at",
          "validate_schedule_type"
        ],
        "endpoints": [],
        "imports": [
          "json",
          "fastapi.APIRouter",
          "fastapi.Depends",
          "fastapi.HTTPException",
          "fastapi.status",
          "fastapi.Request",
          "fastapi.Query",
          "fastapi.security.HTTPBearer",
          "sqlalchemy.orm.Session",
          "datetime.datetime",
          "datetime.timezone",
          "typing.List",
          "typing.Optional",
          "typing.Dict",
          "typing.Any",
          "typing.Union",
          "pydantic.BaseModel",
          "pydantic.Field",
          "pydantic.validator",
          "app.services.jobs_management_service.JobsManagementService",
          "app.services.jobs_management_service.JobsManagementError",
          "app.database.database.get_db",
          "app.core.security.verify_token",
          "app.core.logging.get_structured_logger",
          "app.core.logging.RequestLogger",
          "app.services.user_service.UserService",
          "datetime.datetime"
        ],
        "decorators": []
      },
      {
        "path": "/home/enabledrm/backend/app/api/v2/system_enhanced.py",
        "classes": [
          "SystemInfoResponse",
          "ResourceUsageResponse",
          "ServiceStatusResponse",
          "SystemStatusResponse",
          "SystemConfigurationResponse",
          "SystemConfigurationUpdateRequest",
          "SystemConfigurationUpdateResponse",
          "SystemLogEntry",
          "SystemLogsResponse",
          "HealthCheckResult",
          "SystemHealthResponse",
          "SystemErrorResponse",
          "SystemInfoCompatResponse",
          "TimezonesResponse",
          "CurrentTimeResponse",
          "TimezoneUpdateRequest",
          "SessionTimeoutUpdateRequest",
          "MaxJobsUpdateRequest",
          "LogRetentionUpdateRequest",
          "SettingUpdateResponse",
          "ContainerActionResponse",
          "ServiceActionResponse",
          "EmailTargetResponse",
          "EmailTargetListResponse",
          "EmailTargetSetRequest",
          "EmailTestRequest",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config"
        ],
        "functions": [
          "get_current_user",
          "require_admin_permissions",
          "validate_config_sections"
        ],
        "endpoints": [],
        "imports": [
          "json",
          "fastapi.APIRouter",
          "fastapi.Depends",
          "fastapi.HTTPException",
          "fastapi.status",
          "fastapi.Request",
          "fastapi.Query",
          "fastapi.security.HTTPBearer",
          "sqlalchemy.orm.Session",
          "datetime.datetime",
          "datetime.timezone",
          "typing.List",
          "typing.Optional",
          "typing.Dict",
          "typing.Any",
          "typing.Union",
          "pydantic.BaseModel",
          "pydantic.Field",
          "pydantic.validator",
          "pydantic.EmailStr",
          "app.services.system_management_service.SystemManagementService",
          "app.services.system_management_service.SystemManagementError",
          "app.database.database.get_db",
          "app.core.security.verify_token",
          "app.core.logging.get_structured_logger",
          "app.core.logging.RequestLogger",
          "app.services.user_service.UserService",
          "app.services.system_service.SystemService",
          "app.services.system_service.SystemService",
          "app.services.system_service.SystemService",
          "app.services.system_service.SystemService",
          "app.services.system_service.SystemService",
          "app.services.system_service.SystemService",
          "app.services.system_service.SystemService",
          "app.services.notification_service.NotificationService",
          "app.services.notification_service.NotificationService",
          "app.services.notification_service.NotificationService",
          "app.services.notification_service.NotificationService"
        ],
        "decorators": []
      },
      {
        "path": "/home/enabledrm/backend/app/api/v2/device_types_enhanced.py",
        "classes": [
          "DeviceTypeResponse",
          "DeviceTypeCreateRequest",
          "Config",
          "Config",
          "MockUser"
        ],
        "functions": [
          "get_current_user",
          "__init__"
        ],
        "endpoints": [],
        "imports": [
          "fastapi.APIRouter",
          "fastapi.Depends",
          "fastapi.HTTPException",
          "fastapi.status",
          "sqlalchemy.orm.Session",
          "datetime.datetime",
          "typing.List",
          "typing.Optional",
          "typing.Dict",
          "typing.Any",
          "pydantic.BaseModel",
          "pydantic.Field",
          "app.services.device_types_management_service.DeviceTypesManagementService",
          "app.services.device_types_management_service.DeviceTypesManagementError",
          "app.database.database.get_db",
          "app.core.security.verify_token",
          "app.core.logging.get_structured_logger"
        ],
        "decorators": []
      },
      {
        "path": "/home/enabledrm/backend/app/api/v2/health_enhanced.py",
        "classes": [
          "HealthCheckResult",
          "SystemResourceInfo",
          "OverallHealthResponse",
          "SystemHealthResponse",
          "DatabaseHealthResponse",
          "ApplicationHealthResponse",
          "HealthSummaryResponse",
          "HealthErrorResponse",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config"
        ],
        "functions": [
          "get_current_user_optional",
          "get_current_user"
        ],
        "endpoints": [
          "POST /services/{service_name}/restart"
        ],
        "imports": [
          "json",
          "time",
          "fastapi.APIRouter",
          "fastapi.Depends",
          "fastapi.HTTPException",
          "fastapi.status",
          "fastapi.Request",
          "fastapi.security.HTTPBearer",
          "fastapi.security.HTTPAuthorizationCredentials",
          "sqlalchemy.orm.Session",
          "sqlalchemy.text",
          "datetime.datetime",
          "datetime.timezone",
          "typing.List",
          "typing.Optional",
          "typing.Dict",
          "typing.Any",
          "typing.Union",
          "pydantic.BaseModel",
          "pydantic.Field",
          "app.services.health_management_service.HealthManagementService",
          "app.services.health_management_service.HealthManagementError",
          "app.database.database.get_db",
          "app.core.security.verify_token",
          "app.core.logging.get_structured_logger",
          "app.core.logging.RequestLogger",
          "app.core.config.settings",
          "app.services.user_service.UserService",
          "app.services.user_service.UserService",
          "psutil",
          "platform",
          "docker"
        ],
        "decorators": []
      },
      {
        "path": "/home/enabledrm/backend/app/api/v2/discovery_enhanced.py",
        "classes": [
          "DiscoveryOptionsRequest",
          "NetworkDiscoveryRequest",
          "DiscoveryJobResponse",
          "DiscoveredDevice",
          "DiscoveryProgressInfo",
          "DiscoveryJobStatusResponse",
          "NetworkInventoryResponse",
          "DeviceDetailsResponse",
          "DiscoveryStatisticsResponse",
          "DiscoveryErrorResponse",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config"
        ],
        "functions": [
          "get_current_user",
          "require_discovery_permissions",
          "validate_scan_types",
          "validate_network_range"
        ],
        "endpoints": [],
        "imports": [
          "json",
          "fastapi.APIRouter",
          "fastapi.Depends",
          "fastapi.HTTPException",
          "fastapi.status",
          "fastapi.Request",
          "fastapi.Query",
          "fastapi.security.HTTPBearer",
          "sqlalchemy.orm.Session",
          "datetime.datetime",
          "datetime.timezone",
          "typing.List",
          "typing.Optional",
          "typing.Dict",
          "typing.Any",
          "typing.Union",
          "pydantic.BaseModel",
          "pydantic.Field",
          "pydantic.validator",
          "app.services.discovery_management_service.DiscoveryManagementService",
          "app.services.discovery_management_service.DiscoveryManagementError",
          "app.database.database.get_db",
          "app.core.security.verify_token",
          "app.core.logging.get_structured_logger",
          "app.core.logging.RequestLogger",
          "ipaddress",
          "app.services.user_service.UserService"
        ],
        "decorators": []
      },
      {
        "path": "/home/enabledrm/backend/app/api/v2/notifications_enhanced.py",
        "classes": [
          "NotificationResponse",
          "NotificationCreateRequest",
          "Config",
          "Config"
        ],
        "functions": [],
        "endpoints": [],
        "imports": [
          "fastapi.APIRouter",
          "fastapi.Depends",
          "fastapi.HTTPException",
          "fastapi.status",
          "sqlalchemy.orm.Session",
          "datetime.datetime",
          "typing.List",
          "typing.Optional",
          "typing.Dict",
          "typing.Any",
          "pydantic.BaseModel",
          "pydantic.Field",
          "app.database.database.get_db",
          "app.core.security.verify_token",
          "app.core.logging.get_structured_logger"
        ],
        "decorators": []
      },
      {
        "path": "/home/enabledrm/backend/app/api/v2/metrics_enhanced.py",
        "classes": [
          "MetricValue",
          "SystemMetricsResponse",
          "ApplicationMetricsResponse",
          "PerformanceMetricsResponse",
          "AnalyticsDataResponse",
          "DashboardMetricsResponse",
          "MetricsExportRequest",
          "MetricsExportResponse",
          "MetricsErrorResponse",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config"
        ],
        "functions": [
          "get_current_user",
          "require_metrics_permissions",
          "validate_export_format",
          "validate_time_range"
        ],
        "endpoints": [],
        "imports": [
          "json",
          "fastapi.APIRouter",
          "fastapi.Depends",
          "fastapi.HTTPException",
          "fastapi.status",
          "fastapi.Request",
          "fastapi.Query",
          "fastapi.Response",
          "fastapi.security.HTTPBearer",
          "sqlalchemy.orm.Session",
          "datetime.datetime",
          "datetime.timezone",
          "typing.List",
          "typing.Optional",
          "typing.Dict",
          "typing.Any",
          "typing.Union",
          "pydantic.BaseModel",
          "pydantic.Field",
          "pydantic.validator",
          "app.services.metrics_management_service.MetricsManagementService",
          "app.services.metrics_management_service.MetricsManagementError",
          "app.database.database.get_db",
          "app.core.security.verify_token",
          "app.core.logging.get_structured_logger",
          "app.core.logging.RequestLogger",
          "app.services.user_service.UserService"
        ],
        "decorators": []
      },
      {
        "path": "/home/enabledrm/backend/app/api/v2/log_viewer_enhanced.py",
        "classes": [
          "ActionResultResponse",
          "LogViewerSearchResponse",
          "LogViewerStatsResponse",
          "Config",
          "Config",
          "Config"
        ],
        "functions": [
          "get_current_user",
          "require_log_viewer_permissions",
          "build_search_query"
        ],
        "endpoints": [],
        "imports": [
          "json",
          "fastapi.APIRouter",
          "fastapi.Depends",
          "fastapi.HTTPException",
          "fastapi.status",
          "fastapi.Query",
          "fastapi.security.HTTPBearer",
          "sqlalchemy.orm.Session",
          "sqlalchemy.orm.joinedload",
          "sqlalchemy.and_",
          "sqlalchemy.or_",
          "sqlalchemy.desc",
          "sqlalchemy.func",
          "sqlalchemy.text",
          "datetime.datetime",
          "datetime.timezone",
          "datetime.timedelta",
          "typing.List",
          "typing.Optional",
          "typing.Dict",
          "typing.Any",
          "typing.Union",
          "pydantic.BaseModel",
          "pydantic.Field",
          "app.database.database.get_db",
          "app.core.security.verify_token",
          "app.core.logging.get_structured_logger",
          "app.core.logging.RequestLogger",
          "app.models.job_models.Job",
          "app.models.job_models.JobExecution",
          "app.models.job_models.JobExecutionBranch",
          "app.models.job_models.JobActionResult",
          "app.models.job_models.JobExecutionLog",
          "app.models.job_models.ExecutionStatus",
          "app.models.job_models.LogLevel",
          "app.models.job_models.LogPhase",
          "app.models.universal_target_models.UniversalTarget",
          "app.services.user_service.UserService"
        ],
        "decorators": []
      }
    ],
    "routers": [
      {
        "path": "/home/enabledrm/backend/app/routers/universal_targets_enhanced.py",
        "classes": [
          "TargetCreateRequest",
          "TargetUpdateRequest",
          "CommunicationMethodResponse",
          "TargetHealthStatus",
          "ConnectionStatistics",
          "TargetResponse",
          "TargetListResponse",
          "ConnectionTestResult",
          "TargetDeleteResponse",
          "TargetErrorResponse",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config"
        ],
        "functions": [
          "get_current_user",
          "validate_ip_address"
        ],
        "endpoints": [],
        "imports": [
          "fastapi.APIRouter",
          "fastapi.Depends",
          "fastapi.HTTPException",
          "fastapi.status",
          "fastapi.Query",
          "fastapi.Request",
          "fastapi.security.HTTPBearer",
          "sqlalchemy.orm.Session",
          "datetime.datetime",
          "typing.List",
          "typing.Optional",
          "typing.Dict",
          "typing.Any",
          "typing.Union",
          "pydantic.BaseModel",
          "pydantic.Field",
          "pydantic.IPvAnyAddress",
          "pydantic.validator",
          "app.services.target_management_service.TargetManagementService",
          "app.services.target_management_service.TargetManagementError",
          "app.database.database.get_db",
          "app.core.security.verify_token",
          "app.core.logging.get_structured_logger",
          "app.core.logging.RequestLogger",
          "app.services.user_service.UserService",
          "app.schemas.target_schemas.TargetCreate",
          "app.schemas.target_schemas.TargetUpdate"
        ],
        "decorators": []
      },
      {
        "path": "/home/enabledrm/backend/app/routers/auth_v2_enhanced.py",
        "classes": [],
        "functions": [],
        "endpoints": [],
        "imports": [
          "fastapi.APIRouter",
          "fastapi.Depends",
          "fastapi.HTTPException",
          "fastapi.status",
          "fastapi.Request",
          "fastapi.security.HTTPBearer",
          "sqlalchemy.orm.Session",
          "datetime.datetime",
          "typing.Dict",
          "typing.Any",
          "app.routers.auth_v1_enhanced.UserLoginRequest",
          "app.routers.auth_v1_enhanced.TokenResponse",
          "app.routers.auth_v1_enhanced.RefreshTokenRequest",
          "app.routers.auth_v1_enhanced.UserInfoResponse",
          "app.routers.auth_v1_enhanced.LogoutResponse",
          "app.routers.auth_v1_enhanced.AuthErrorResponse",
          "app.services.auth_service.AuthService",
          "app.services.auth_service.AuthenticationError",
          "app.database.database.get_db",
          "app.core.logging.get_structured_logger",
          "app.core.logging.RequestLogger",
          "app.core.security.verify_token",
          "app.core.security.verify_token",
          "app.core.cache.get_redis_client"
        ],
        "decorators": []
      },
      {
        "path": "/home/enabledrm/backend/app/routers/auth.py",
        "classes": [],
        "functions": [],
        "endpoints": [
          "POST /login",
          "POST /logout",
          "POST /refresh",
          "GET /me"
        ],
        "imports": [
          "fastapi.APIRouter",
          "fastapi.Depends",
          "fastapi.HTTPException",
          "fastapi.status",
          "fastapi.Request",
          "fastapi.security.HTTPBearer",
          "sqlalchemy.orm.Session",
          "datetime.timedelta",
          "app.database.database.get_db",
          "app.schemas.user_schemas.UserLogin",
          "app.schemas.user_schemas.Token",
          "app.schemas.user_schemas.TokenData",
          "app.services.user_service.UserService",
          "app.core.security.create_access_token",
          "app.core.security.create_refresh_token",
          "app.core.security.verify_token",
          "app.core.config.settings",
          "app.domains.audit.services.audit_service.AuditService",
          "app.domains.audit.services.audit_service.AuditEventType",
          "app.domains.audit.services.audit_service.AuditSeverity",
          "app.shared.infrastructure.cache.cache_service"
        ],
        "decorators": []
      },
      {
        "path": "/home/enabledrm/backend/app/routers/audit.py",
        "classes": [
          "UserLookupResponse",
          "TargetLookupResponse",
          "AuditEventResponse",
          "AuditEventsListResponse",
          "EventTypeResponse",
          "EventTypesResponse"
        ],
        "functions": [
          "get_current_user",
          "require_audit_permissions"
        ],
        "endpoints": [
          "GET /lookups/users",
          "GET /lookups/targets",
          "GET /events",
          "GET /event-types",
          "POST /search",
          "GET /verify/{event_id}",
          "GET /compliance/report"
        ],
        "imports": [
          "fastapi.APIRouter",
          "fastapi.Depends",
          "fastapi.HTTPException",
          "fastapi.status",
          "fastapi.Query",
          "fastapi.security.HTTPBearer",
          "fastapi.security.HTTPAuthorizationCredentials",
          "sqlalchemy.orm.Session",
          "typing.List",
          "typing.Optional",
          "typing.Dict",
          "typing.Any",
          "datetime.datetime",
          "pydantic.BaseModel",
          "app.database.database.get_db",
          "app.core.security.verify_token",
          "app.services.user_service.UserService",
          "app.services.universal_target_service.UniversalTargetService",
          "app.domains.audit.services.audit_service.AuditService",
          "app.domains.audit.services.audit_service.AuditEventType",
          "app.domains.audit.services.audit_service.AuditEventType",
          "app.domains.audit.services.audit_service.AuditSeverity"
        ],
        "decorators": []
      },
      {
        "path": "/home/enabledrm/backend/app/routers/users_enhanced.py",
        "classes": [
          "UserCreateRequest",
          "UserUpdateRequest",
          "UserResponse",
          "UserListResponse",
          "UserSessionResponse",
          "UserDeleteResponse",
          "UserErrorResponse",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config"
        ],
        "functions": [
          "get_current_user",
          "require_admin_role"
        ],
        "endpoints": [],
        "imports": [
          "fastapi.APIRouter",
          "fastapi.Depends",
          "fastapi.HTTPException",
          "fastapi.status",
          "fastapi.Query",
          "fastapi.Request",
          "fastapi.security.HTTPBearer",
          "sqlalchemy.orm.Session",
          "datetime.datetime",
          "typing.List",
          "typing.Optional",
          "typing.Dict",
          "typing.Any",
          "pydantic.BaseModel",
          "pydantic.Field",
          "pydantic.EmailStr",
          "app.services.user_management_service.UserManagementService",
          "app.services.user_management_service.UserManagementError",
          "app.database.database.get_db",
          "app.core.security.verify_token",
          "app.core.logging.get_structured_logger",
          "app.core.logging.RequestLogger",
          "app.services.user_service.UserService",
          "app.schemas.user_schemas.UserCreate",
          "app.schemas.user_schemas.UserUpdate"
        ],
        "decorators": []
      },
      {
        "path": "/home/enabledrm/backend/app/routers/auth_v1_enhanced.py",
        "classes": [
          "UserLoginRequest",
          "TokenResponse",
          "RefreshTokenRequest",
          "UserInfoResponse",
          "LogoutResponse",
          "AuthErrorResponse",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config",
          "Config"
        ],
        "functions": [
          "_get_user_permissions"
        ],
        "endpoints": [],
        "imports": [
          "fastapi.APIRouter",
          "fastapi.Depends",
          "fastapi.HTTPException",
          "fastapi.status",
          "fastapi.Request",
          "fastapi.security.HTTPBearer",
          "sqlalchemy.orm.Session",
          "datetime.timedelta",
          "datetime.datetime",
          "typing.Optional",
          "typing.Dict",
          "typing.Any",
          "pydantic.BaseModel",
          "pydantic.Field",
          "pydantic.EmailStr",
          "logging",
          "app.database.database.get_db",
          "app.core.security.create_access_token",
          "app.core.security.create_refresh_token",
          "app.core.security.verify_token",
          "app.core.config.settings",
          "app.services.user_service.UserService",
          "app.domains.audit.services.audit_service.AuditService",
          "app.domains.audit.services.audit_service.AuditEventType",
          "app.domains.audit.services.audit_service.AuditSeverity",
          "app.shared.infrastructure.cache.cache_service",
          "app.shared.infrastructure.cache.cache_service"
        ],
        "decorators": []
      },
      {
        "path": "/home/enabledrm/backend/app/routers/users.py",
        "classes": [],
        "functions": [
          "get_current_user",
          "require_admin_role"
        ],
        "endpoints": [
          "POST /",
          "GET /",
          "GET /{user_id}",
          "PUT /{user_id}",
          "DELETE /{user_id}",
          "GET /{user_id}/sessions"
        ],
        "imports": [
          "fastapi.APIRouter",
          "fastapi.Depends",
          "fastapi.HTTPException",
          "fastapi.status",
          "fastapi.Query",
          "fastapi.Request",
          "fastapi.security.HTTPBearer",
          "sqlalchemy.orm.Session",
          "typing.List",
          "app.database.database.get_db",
          "app.schemas.user_schemas.UserCreate",
          "app.schemas.user_schemas.UserUpdate",
          "app.schemas.user_schemas.UserResponse",
          "app.schemas.user_schemas.UserSessionResponse",
          "app.services.user_service.UserService",
          "app.core.security.verify_token",
          "app.domains.audit.services.audit_service.AuditService",
          "app.domains.audit.services.audit_service.AuditEventType",
          "app.domains.audit.services.audit_service.AuditSeverity"
        ],
        "decorators": []
      },
      {
        "path": "/home/enabledrm/backend/app/routers/universal_targets.py",
        "classes": [],
        "functions": [
          "get_current_user",
          "get_target_service"
        ],
        "endpoints": [
          "GET /",
          "GET /{target_id}",
          "POST /",
          "POST /comprehensive",
          "PUT /{target_id}",
          "PUT /{target_id}/comprehensive",
          "DELETE /{target_id}",
          "POST /{target_id}/test-connection",
          "GET /uuid/{target_uuid}",
          "GET /serial/{target_serial}",
          "POST /{target_id}/communication-methods",
          "PUT /{target_id}/communication-methods/{method_id}",
          "DELETE /{target_id}/communication-methods/{method_id}",
          "POST /{target_id}/communication-methods/{method_id}/test",
          "POST /{target_id}/health-check",
          "POST /health-check-batch",
          "GET /health-monitoring/settings",
          "POST /test-method-config"
        ],
        "imports": [
          "typing.List",
          "datetime.datetime",
          "logging",
          "fastapi.APIRouter",
          "fastapi.Depends",
          "fastapi.HTTPException",
          "fastapi.status",
          "fastapi.Request",
          "sqlalchemy.orm.Session",
          "app.database.database.get_db",
          "app.services.universal_target_service.UniversalTargetService",
          "app.services.health_monitoring_service.HealthMonitoringService",
          "app.services.user_service.UserService",
          "app.utils.target_utils.getTargetIpAddress",
          "app.domains.audit.services.audit_service.AuditService",
          "app.domains.audit.services.audit_service.AuditEventType",
          "app.domains.audit.services.audit_service.AuditSeverity",
          "app.core.security.verify_token",
          "app.models.user_models.User",
          "fastapi.security.HTTPBearer",
          "fastapi.security.HTTPAuthorizationCredentials",
          "app.schemas.target_schemas.TargetCreate",
          "app.schemas.target_schemas.TargetUpdate",
          "app.schemas.target_schemas.TargetComprehensiveUpdate",
          "app.schemas.target_schemas.TargetResponse",
          "app.schemas.target_schemas.TargetSummary",
          "app.schemas.target_schemas.ConnectionTestResult",
          "app.schemas.target_schemas.ErrorResponse",
          "app.schemas.target_schemas.CommunicationMethodCreate",
          "app.schemas.target_schemas.CommunicationMethodUpdate",
          "app.schemas.target_schemas.CommunicationMethodResponse",
          "app.services.serial_service.SerialService",
          "app.models.universal_target_models.UniversalTarget",
          "app.config.health_monitoring.DEFAULT_HEALTH_CHECK_INTERVALS",
          "app.config.health_monitoring.HEALTH_CHECK_TIMEOUTS",
          "app.config.health_monitoring.HEALTH_THRESHOLDS",
          "app.config.health_monitoring.HEALTH_MONITORING_SETTINGS",
          "app.utils.connection_test_utils.test_ssh_connection",
          "app.utils.connection_test_utils.test_winrm_connection",
          "app.utils.connection_test_utils.test_smtp_connection",
          "app.utils.connection_test_utils.test_snmp_connection",
          "app.utils.connection_test_utils.test_telnet_connection",
          "app.utils.connection_test_utils.test_rest_api_connection"
        ],
        "decorators": []
      }
    ],
    "legacy": []
  },
  "services": {
    "app_services": [
      {
        "path": "/home/enabledrm/backend/app/services/job_safety_service.py",
        "classes": [
          "JobSafetyService"
        ],
        "functions": [
          "__init__",
          "cleanup_stale_jobs",
          "force_terminate_job",
          "get_job_health_status"
        ],
        "endpoints": [],
        "imports": [
          "logging",
          "datetime.datetime",
          "datetime.timezone",
          "datetime.timedelta",
          "typing.List",
          "typing.Optional",
          "sqlalchemy.orm.Session",
          "app.models.job_models.Job",
          "app.models.job_models.JobExecution",
          "app.models.job_models.JobStatus",
          "app.models.job_models.ExecutionStatus",
          "app.models.universal_target_models.UniversalTarget"
        ],
        "decorators": []
      },
      {
        "path": "/home/enabledrm/backend/app/services/health_management_service.py",
        "classes": [
          "HealthManagementService",
          "HealthManagementError"
        ],
        "functions": [
          "with_performance_logging",
          "with_caching",
          "decorator",
          "__init__",
          "__init__"
        ],
        "endpoints": [],
        "imports": [
          "logging",
          "time",
          "json",
          "asyncio",
          "psutil",
          "subprocess",
          "docker",
          "typing.Optional",
          "typing.Dict",
          "typing.Any",
          "typing.List",
          "datetime.datetime",
          "datetime.timedelta",
          "functools.wraps",
          "sqlalchemy.orm.Session",
          "sqlalchemy.text",
          "app.core.cache.get_redis_client",
          "app.core.logging.get_structured_logger",
          "app.core.config.settings"
        ],
        "decorators": []
      },
      {
        "path": "/home/enabledrm/backend/app/services/discovery_service.py",
        "classes": [
          "DiscoveryService"
        ],
        "functions": [
          "__init__",
          "create_discovery_job",
          "get_discovery_job",
          "list_discovery_jobs",
          "update_discovery_job",
          "delete_discovery_job",
          "cancel_discovery_job",
          "get_discovered_device",
          "list_discovered_devices",
          "list_importable_devices",
          "import_in_memory_devices",
          "_map_device_type_to_os",
          "update_discovered_device_status",
          "import_discovered_devices",
          "import_configured_devices",
          "_create_target_from_device",
          "_create_target_from_configured_device",
          "_create_communication_methods_for_device",
          "create_discovery_template",
          "get_discovery_template",
          "list_discovery_templates",
          "get_discovery_stats"
        ],
        "endpoints": [],
        "imports": [
          "asyncio",
          "logging",
          "typing.List",
          "typing.Optional",
          "typing.Dict",
          "typing.Any",
          "datetime.datetime",
          "sqlalchemy.orm.Session",
          "sqlalchemy.and_",
          "sqlalchemy.or_",
          "sqlalchemy.desc",
          "app.models.discovery_models.DiscoveryJob",
          "app.models.discovery_models.DiscoveredDevice",
          "app.models.discovery_models.DiscoveryTemplate",
          "app.models.discovery_models.DiscoverySchedule",
          "app.schemas.discovery_schemas.DiscoveryJobCreate",
          "app.schemas.discovery_schemas.DiscoveryJobUpdate",
          "app.schemas.discovery_schemas.DiscoveryJobResponse",
          "app.schemas.discovery_schemas.DiscoveredDeviceResponse",
          "app.schemas.discovery_schemas.DiscoveryTemplateCreate",
          "app.schemas.discovery_schemas.DiscoveryTemplateUpdate",
          "app.schemas.discovery_schemas.DeviceImportRequest",
          "app.schemas.discovery_schemas.DeviceImportResponse",
          "app.schemas.discovery_schemas.DiscoveryStatsResponse",
          "app.services.network_discovery_service.NetworkDiscoveryService",
          "app.services.network_discovery_service.DiscoveryConfig",
          "app.services.network_discovery_service.DiscoveredDevice",
          "app.services.universal_target_service.UniversalTargetService",
          "app.schemas.discovery_schemas.BulkDeviceImportRequest",
          "app.schemas.discovery_schemas.DeviceImportResponse",
          "app.schemas.discovery_schemas.DeviceTargetConfig",
          "sqlalchemy.func",
          "ipaddress",
          "time",
          "app.tasks.discovery_tasks.run_discovery_job_task",
          "ipaddress"
        ],
        "decorators": []
      },
      {
        "path": "/home/enabledrm/backend/app/services/websocket_management_service.py",
        "classes": [
          "WebSocketManagementService",
          "WebSocketManagementError"
        ],
        "functions": [
          "with_performance_logging",
          "with_caching",
          "decorator",
          "__init__",
          "__init__"
        ],
        "endpoints": [],
        "imports": [
          "logging",
          "time",
          "json",
          "asyncio",
          "typing.Optional",
          "typing.Dict",
          "typing.Any",
          "typing.List",
          "typing.Set",
          "datetime.datetime",
          "datetime.timedelta",
          "functools.wraps",
          "fastapi.WebSocket",
          "app.core.cache.get_redis_client",
          "app.core.logging.get_structured_logger",
          "app.core.config.settings",
          "app.shared.infrastructure.websocket.connection_manager",
          "app.core.security.verify_token"
        ],
        "decorators": []
      },
      {
        "path": "/home/enabledrm/backend/app/services/discovery_management_service.py",
        "classes": [
          "DiscoveryManagementService",
          "DiscoveryManagementError"
        ],
        "functions": [
          "with_performance_logging",
          "with_caching",
          "decorator",
          "__init__",
          "_update_task_status_sync",
          "_get_device_info",
          "_get_service_banners",
          "_get_mac_address",
          "_get_vendor_from_mac",
          "_analyze_service_banners",
          "_analyze_vendor_info",
          "_get_ttl_os_hints",
          "_identify_device_type",
          "_is_network_device",
          "_is_windows_system",
          "_is_linux_system",
          "_identify_specialized_device",
          "_fallback_classification",
          "_ping_host",
          "_determine_device_type",
          "__init__",
          "scan_port"
        ],
        "endpoints": [],
        "imports": [
          "logging",
          "time",
          "json",
          "asyncio",
          "ipaddress",
          "typing.Optional",
          "typing.Dict",
          "typing.Any",
          "typing.List",
          "datetime.datetime",
          "datetime.timedelta",
          "functools.wraps",
          "sqlalchemy.orm.Session",
          "app.core.cache.get_redis_client",
          "app.core.logging.get_structured_logger",
          "app.core.config.settings",
          "socket",
          "datetime.datetime",
          "app.domains.audit.services.audit_service.AuditService",
          "app.domains.audit.services.audit_service.AuditEventType",
          "app.domains.audit.services.audit_service.AuditSeverity",
          "uuid",
          "app.tasks.discovery_tasks.run_in_memory_discovery_task",
          "subprocess",
          "socket",
          "concurrent.futures",
          "concurrent.futures.ThreadPoolExecutor",
          "redis",
          "app.core.config.settings",
          "subprocess",
          "re",
          "subprocess",
          "re",
          "socket",
          "re",
          "socket",
          "subprocess",
          "platform",
          "socket",
          "socket",
          "concurrent.futures",
          "concurrent.futures.ThreadPoolExecutor",
          "app.database.database.get_db",
          "app.models.universal_target_models.TargetCommunicationMethod",
          "sqlalchemy.orm.Session",
          "app.models.universal_target_models.UniversalTarget"
        ],
        "decorators": []
      },
      {
        "path": "/home/enabledrm/backend/app/services/serial_service.py",
        "classes": [
          "SerialService"
        ],
        "functions": [
          "generate_job_serial",
          "generate_target_serial",
          "generate_execution_serial",
          "generate_branch_serial",
          "generate_action_serial",
          "validate_job_serial",
          "validate_target_serial",
          "validate_execution_serial",
          "validate_branch_serial",
          "validate_action_serial",
          "parse_execution_serial",
          "parse_branch_serial",
          "parse_action_serial"
        ],
        "endpoints": [],
        "imports": [
          "datetime.datetime",
          "sqlalchemy.orm.Session",
          "sqlalchemy.text",
          "app.database.database.get_db",
          "logging"
        ],
        "decorators": []
      },
      {
        "path": "/home/enabledrm/backend/app/services/analytics_service.py",
        "classes": [
          "AnalyticsService"
        ],
        "functions": [
          "__init__",
          "get_realtime_dashboard_metrics",
          "_get_job_metrics",
          "_get_target_metrics",
          "_get_system_metrics",
          "_get_recent_activity",
          "_get_performance_trends",
          "_get_error_summary",
          "get_executive_summary",
          "_build_job_stats_since",
          "get_realtime_dashboard_metrics",
          "_get_job_metrics",
          "_get_target_metrics",
          "_get_system_metrics",
          "_get_recent_activity",
          "_get_performance_trends",
          "_get_error_summary",
          "get_job_performance_analytics",
          "get_target_performance_analytics",
          "_get_daily_execution_trends",
          "_get_daily_target_trends",
          "generate_executive_report",
          "_generate_recommendations"
        ],
        "endpoints": [],
        "imports": [
          "datetime.datetime",
          "datetime.timedelta",
          "datetime.timezone",
          "typing.Dict",
          "typing.Any",
          "typing.List",
          "typing.Optional",
          "sqlalchemy.orm.Session",
          "sqlalchemy.func",
          "sqlalchemy.and_",
          "sqlalchemy.or_",
          "json",
          "logging",
          "app.models.job_models.Job",
          "app.models.job_models.JobExecution",
          "app.models.job_models.JobStatus",
          "app.models.job_models.ExecutionStatus",
          "app.models.job_models.JobExecutionBranch",
          "app.models.job_models.JobExecutionLog",
          "app.models.universal_target_models.UniversalTarget",
          "app.models.analytics_models.PerformanceMetric",
          "app.models.analytics_models.SystemHealthSnapshot",
          "app.models.analytics_models.MetricType",
          "app.models.analytics_models.AggregationPeriod",
          "app.utils.target_utils.getTargetSummary",
          "app.models.job_models.JobTarget"
        ],
        "decorators": []
      },
      {
        "path": "/home/enabledrm/backend/app/services/simple_analytics_service.py",
        "classes": [
          "SimpleAnalyticsService"
        ],
        "functions": [
          "__init__",
          "get_realtime_dashboard_metrics"
        ],
        "endpoints": [],
        "imports": [
          "datetime.datetime",
          "datetime.timedelta",
          "datetime.timezone",
          "typing.Dict",
          "typing.Any",
          "typing.List",
          "typing.Optional",
          "sqlalchemy.orm.Session",
          "sqlalchemy.func",
          "sqlalchemy.and_",
          "sqlalchemy.or_",
          "logging",
          "app.models.job_models.Job",
          "app.models.job_models.JobExecution",
          "app.models.job_models.JobStatus",
          "app.models.job_models.ExecutionStatus",
          "app.models.universal_target_models.UniversalTarget"
        ],
        "decorators": []
      },
      {
        "path": "/home/enabledrm/backend/app/services/notification_service.py",
        "classes": [
          "NotificationService"
        ],
        "functions": [
          "__init__",
          "_get_setting",
          "get_eligible_email_targets",
          "get_email_target_config",
          "set_email_target",
          "get_default_email_target",
          "send_email",
          "_send_single_email",
          "_add_attachment",
          "_is_valid_email",
          "_log_notification",
          "get_template",
          "send_templated_email",
          "_render_template",
          "create_alert",
          "_check_alert_notifications",
          "_evaluate_alert_condition",
          "_send_alert_notification",
          "resolve_alert",
          "get_notification_logs",
          "get_alert_logs",
          "send_job_notification"
        ],
        "endpoints": [],
        "imports": [
          "smtplib",
          "ssl",
          "email.mime.text.MIMEText",
          "email.mime.multipart.MIMEMultipart",
          "email.mime.base.MIMEBase",
          "email.encoders",
          "typing.Dict",
          "typing.Any",
          "typing.List",
          "typing.Optional",
          "typing.Union",
          "sqlalchemy.orm.Session",
          "sqlalchemy.select",
          "logging",
          "datetime.datetime",
          "datetime.timezone",
          "json",
          "re",
          "models.notification_models.NotificationTemplate",
          "models.notification_models.NotificationLog",
          "models.notification_models.AlertRule",
          "models.notification_models.AlertLog",
          "models.universal_target_models.UniversalTarget",
          "models.system_models.SystemSetting",
          "os",
          "models.universal_target_models.TargetCommunicationMethod",
          "services.system_service.SystemService",
          "utils.encryption_utils.decrypt_credentials",
          "utils.connection_test_utils.test_smtp_connection",
          "utils.encryption_utils.decrypt_credentials"
        ],
        "decorators": []
      },
      {
        "path": "/home/enabledrm/backend/app/services/job_scheduling_service.py",
        "classes": [
          "JobSchedulingService"
        ],
        "functions": [
          "__init__",
          "create_schedule",
          "get_job_schedules",
          "get_schedule",
          "update_schedule",
          "delete_schedule",
          "get_due_schedules",
          "mark_schedule_executed",
          "_calculate_next_recurring_run",
          "_calculate_next_cron_run"
        ],
        "endpoints": [],
        "imports": [
          "logging",
          "datetime.datetime",
          "datetime.timezone",
          "datetime.timedelta",
          "typing.List",
          "typing.Optional",
          "typing.Dict",
          "typing.Any",
          "sqlalchemy.orm.Session",
          "croniter.croniter",
          "app.models.job_models.Job",
          "app.models.job_schedule_models.JobSchedule",
          "app.models.job_schedule_models.ScheduleExecution",
          "app.models.job_schedule_models.ScheduleType",
          "app.models.job_schedule_models.RecurringType"
        ],
        "decorators": []
      },
      {
        "path": "/home/enabledrm/backend/app/services/universal_target_service.py",
        "classes": [
          "UniversalTargetService"
        ],
        "functions": [
          "__init__",
          "_check_duplicate_active_ip",
          "create_target",
          "get_all_targets",
          "get_target_by_id",
          "get_target_by_uuid",
          "get_target_by_serial",
          "get_target_by_name",
          "get_target_by_host",
          "update_target",
          "delete_target",
          "get_targets_summary",
          "test_target_connection",
          "update_target_comprehensive",
          "add_communication_method",
          "update_communication_method",
          "delete_communication_method",
          "test_communication_method",
          "is_real_credential_value"
        ],
        "endpoints": [],
        "imports": [
          "typing.List",
          "typing.Optional",
          "typing.Dict",
          "typing.Any",
          "sqlalchemy.orm.Session",
          "sqlalchemy.orm.joinedload",
          "sqlalchemy.and_",
          "app.models.universal_target_models.UniversalTarget",
          "app.models.universal_target_models.TargetCommunicationMethod",
          "app.models.universal_target_models.TargetCredential",
          "app.services.serial_service.SerialService",
          "app.utils.target_utils.getTargetIpAddress",
          "app.utils.target_utils.getTargetPrimaryCommunicationMethod",
          "app.utils.target_utils.validateTargetCommunication",
          "app.utils.target_utils.getTargetSummary",
          "app.utils.target_utils.getDefaultCommunicationMethodConfig",
          "app.utils.target_utils.validateMethodTypeForOS",
          "app.utils.target_utils.generateMethodName",
          "app.utils.encryption_utils.encrypt_password_credentials",
          "app.utils.encryption_utils.encrypt_ssh_key_credentials",
          "app.utils.encryption_utils.decrypt_credentials",
          "app.utils.connection_test_utils.perform_connection_test",
          "utils.encryption_utils.encrypt_password_credentials",
          "utils.encryption_utils.encrypt_ssh_key_credentials",
          "utils.target_utils.getDefaultCommunicationMethodConfig",
          "utils.target_utils.generateMethodName"
        ],
        "decorators": []
      },
      {
        "path": "/home/enabledrm/backend/app/services/job_execution_service.py",
        "classes": [
          "JobExecutionService"
        ],
        "functions": [
          "__init__",
          "_get_branch_for_target",
          "_get_primary_communication_method",
          "_get_credentials_for_method"
        ],
        "endpoints": [],
        "imports": [
          "asyncio",
          "paramiko",
          "logging",
          "time",
          "typing.Dict",
          "typing.Any",
          "typing.Optional",
          "typing.List",
          "datetime.datetime",
          "datetime.timezone",
          "app.models.job_models.JobExecution",
          "app.models.job_models.JobExecutionBranch",
          "app.models.job_models.ExecutionStatus",
          "app.models.job_models.LogPhase",
          "app.models.job_models.LogLevel",
          "app.models.job_models.LogCategory",
          "app.models.universal_target_models.UniversalTarget",
          "app.services.job_service.JobService",
          "app.utils.target_utils.getTargetIpAddress",
          "app.core.config.settings",
          "app.models.job_models.JobAction",
          "app.models.universal_target_models.TargetCommunicationMethod",
          "app.models.universal_target_models.TargetCredential",
          "app.utils.encryption_utils.decrypt_credentials",
          "app.models.job_models.JobActionResult",
          "app.models.job_models.ExecutionStatus",
          "app.models.job_models.JobExecutionBranch",
          "app.services.serial_service.SerialService",
          "winrm"
        ],
        "decorators": []
      },
      {
        "path": "/home/enabledrm/backend/app/services/device_types_management_service.py",
        "classes": [
          "DeviceTypesManagementService",
          "DeviceTypesManagementError"
        ],
        "functions": [
          "with_performance_logging",
          "with_caching",
          "decorator",
          "__init__",
          "__init__"
        ],
        "endpoints": [],
        "imports": [
          "logging",
          "time",
          "json",
          "asyncio",
          "typing.Optional",
          "typing.Dict",
          "typing.Any",
          "typing.List",
          "datetime.datetime",
          "datetime.timedelta",
          "functools.wraps",
          "sqlalchemy.orm.Session",
          "app.core.cache.get_redis_client",
          "app.core.logging.get_structured_logger",
          "app.core.config.settings"
        ],
        "decorators": []
      },
      {
        "path": "/home/enabledrm/backend/app/services/device_type_service_v2.py",
        "classes": [
          "DeviceTypeServiceV2"
        ],
        "functions": [
          "with_caching_v2",
          "with_performance_logging_v2",
          "decorator",
          "__init__"
        ],
        "endpoints": [],
        "imports": [
          "logging",
          "time",
          "typing.List",
          "typing.Dict",
          "typing.Optional",
          "typing.Set",
          "typing.Tuple",
          "functools.wraps",
          "json",
          "app.repositories.device_type_repository.DeviceTypeRepository",
          "app.repositories.device_type_repository.get_device_type_repository",
          "app.core.device_types.device_registry",
          "app.core.device_types.DeviceCategory",
          "app.core.cache.get_redis_client",
          "app.core.logging.get_structured_logger",
          "app.database.database.get_db",
          "sqlalchemy.orm.Session"
        ],
        "decorators": []
      },
      {
        "path": "/home/enabledrm/backend/app/services/metrics_management_service.py",
        "classes": [
          "MetricsManagementService",
          "MetricsManagementError"
        ],
        "functions": [
          "with_performance_logging",
          "with_caching",
          "decorator",
          "__init__",
          "__init__"
        ],
        "endpoints": [],
        "imports": [
          "logging",
          "time",
          "json",
          "asyncio",
          "typing.Optional",
          "typing.Dict",
          "typing.Any",
          "typing.List",
          "datetime.datetime",
          "datetime.timedelta",
          "functools.wraps",
          "sqlalchemy.orm.Session",
          "app.core.cache.get_redis_client",
          "app.core.logging.get_structured_logger",
          "app.core.config.settings",
          "app.domains.monitoring.services.metrics_service.MetricsService"
        ],
        "decorators": []
      },
      {
        "path": "/home/enabledrm/backend/app/services/job_service.py",
        "classes": [
          "JobService"
        ],
        "functions": [
          "__init__",
          "create_job",
          "get_job",
          "get_job_by_uuid",
          "get_job_by_serial",
          "get_jobs",
          "get_jobs_with_last_execution",
          "schedule_job",
          "execute_job",
          "update_job",
          "delete_job",
          "get_job_target_ids",
          "get_job_targets",
          "get_job_execution",
          "get_execution_by_serial",
          "get_job_executions",
          "get_execution_action_results",
          "update_execution_status",
          "update_branch_status",
          "_update_job_status_from_executions",
          "_log_job_event"
        ],
        "endpoints": [],
        "imports": [
          "sqlalchemy.orm.Session",
          "typing.List",
          "typing.Optional",
          "typing.Dict",
          "typing.Any",
          "datetime.datetime",
          "datetime.timezone",
          "logging",
          "app.models.job_models.Job",
          "app.models.job_models.JobAction",
          "app.models.job_models.JobExecution",
          "app.models.job_models.JobExecutionBranch",
          "app.models.job_models.JobExecutionLog",
          "app.models.job_models.JobActionResult",
          "app.models.job_models.JobStatus",
          "app.models.job_models.ExecutionStatus",
          "app.models.job_models.LogPhase",
          "app.models.job_models.LogLevel",
          "app.models.job_models.LogCategory",
          "app.schemas.job_schemas.JobCreate",
          "app.schemas.job_schemas.JobSchedule",
          "app.schemas.job_schemas.JobExecuteRequest",
          "app.models.universal_target_models.UniversalTarget",
          "app.services.notification_service.NotificationService",
          "app.services.serial_service.SerialService",
          "app.models.job_models.JobTarget",
          "sqlalchemy.orm.joinedload",
          "sqlalchemy.func",
          "sqlalchemy.orm.aliased",
          "app.models.job_models.JobActionResult",
          "app.models.job_models.JobExecutionBranch",
          "app.models.job_models.JobExecution",
          "app.models.universal_target_models.UniversalTarget",
          "app.models.job_models.JobActionResult",
          "app.models.universal_target_models.UniversalTarget"
        ],
        "decorators": []
      },
      {
        "path": "/home/enabledrm/backend/app/services/audit_management_service.py",
        "classes": [
          "AuditManagementService",
          "AuditManagementError"
        ],
        "functions": [
          "with_performance_logging",
          "with_caching",
          "decorator",
          "__init__",
          "__init__"
        ],
        "endpoints": [],
        "imports": [
          "logging",
          "time",
          "json",
          "asyncio",
          "typing.Optional",
          "typing.Dict",
          "typing.Any",
          "typing.List",
          "typing.Tuple",
          "datetime.datetime",
          "datetime.timedelta",
          "datetime.timezone",
          "functools.wraps",
          "sqlalchemy.orm.Session",
          "app.core.cache.get_redis_client",
          "app.core.logging.get_structured_logger",
          "app.core.config.settings",
          "app.domains.audit.services.audit_service.AuditService",
          "app.domains.audit.services.audit_service.AuditEventType",
          "app.domains.audit.services.audit_service.AuditSeverity"
        ],
        "decorators": []
      },
      {
        "path": "/home/enabledrm/backend/app/services/system_service.py",
        "classes": [
          "SystemService"
        ],
        "functions": [
          "__init__",
          "get_setting",
          "set_setting",
          "get_all_settings",
          "get_timezone",
          "set_timezone",
          "get_dst_rules",
          "set_dst_rules",
          "get_session_timeout",
          "set_session_timeout",
          "get_max_concurrent_jobs",
          "set_max_concurrent_jobs",
          "get_log_retention_days",
          "set_log_retention_days",
          "get_system_info",
          "get_system_uptime",
          "get_timezone_display_name",
          "get_current_utc_offset",
          "is_dst_active",
          "utc_to_local",
          "local_to_utc",
          "utc_to_local_string",
          "get_available_timezones",
          "validate_job_schedule_time"
        ],
        "endpoints": [],
        "imports": [
          "sqlalchemy.orm.Session",
          "sqlalchemy.select",
          "typing.Dict",
          "typing.Any",
          "typing.Optional",
          "typing.List",
          "datetime.datetime",
          "datetime.timezone",
          "pytz",
          "psutil",
          "models.system_models.SystemSetting"
        ],
        "decorators": []
      },
      {
        "path": "/home/enabledrm/backend/app/services/jobs_management_service.py",
        "classes": [
          "JobsManagementService",
          "JobsManagementError"
        ],
        "functions": [
          "with_performance_logging",
          "with_caching",
          "decorator",
          "__init__",
          "__init__",
          "datetime_to_iso"
        ],
        "endpoints": [],
        "imports": [
          "logging",
          "time",
          "json",
          "asyncio",
          "typing.Optional",
          "typing.Dict",
          "typing.Any",
          "typing.List",
          "datetime.datetime",
          "datetime.timedelta",
          "functools.wraps",
          "sqlalchemy.orm.Session",
          "app.core.cache.get_redis_client",
          "app.core.logging.get_structured_logger",
          "app.core.config.settings",
          "app.services.job_service.JobService",
          "app.services.user_service.UserService",
          "app.domains.audit.services.audit_service.AuditService",
          "app.domains.audit.services.audit_service.AuditEventType",
          "app.domains.audit.services.audit_service.AuditSeverity",
          "app.tasks.job_tasks.execute_job_task",
          "app.schemas.job_schemas.JobCreate",
          "app.schemas.job_schemas.JobActionCreate",
          "app.models.job_models.JobType",
          "app.models.job_models.ActionType",
          "app.models.job_models.JobStatus",
          "app.models.job_models.JobAction",
          "app.models.job_models.JobExecution",
          "app.models.job_models.JobExecution",
          "traceback",
          "traceback",
          "app.models.job_models.JobAction"
        ],
        "decorators": []
      },
      {
        "path": "/home/enabledrm/backend/app/services/system_management_service.py",
        "classes": [
          "SystemManagementService",
          "SystemManagementError"
        ],
        "functions": [
          "with_performance_logging",
          "with_caching",
          "decorator",
          "__init__",
          "__init__"
        ],
        "endpoints": [],
        "imports": [
          "logging",
          "time",
          "json",
          "asyncio",
          "os",
          "psutil",
          "typing.Optional",
          "typing.Dict",
          "typing.Any",
          "typing.List",
          "datetime.datetime",
          "datetime.timedelta",
          "functools.wraps",
          "sqlalchemy.orm.Session",
          "app.core.cache.get_redis_client",
          "app.core.logging.get_structured_logger",
          "app.core.config.settings",
          "app.domains.audit.services.audit_service.AuditService",
          "app.domains.audit.services.audit_service.AuditEventType",
          "app.domains.audit.services.audit_service.AuditSeverity",
          "platform"
        ],
        "decorators": []
      },
      {
        "path": "/home/enabledrm/backend/app/services/user_service.py",
        "classes": [
          "UserService"
        ],
        "functions": [
          "create_user",
          "get_user_by_id",
          "get_user_by_username",
          "get_user_by_email",
          "get_users",
          "update_user",
          "delete_user",
          "authenticate_user",
          "update_last_login",
          "create_user_session",
          "get_user_session",
          "update_session_activity",
          "delete_user_session",
          "cleanup_expired_sessions"
        ],
        "endpoints": [],
        "imports": [
          "sqlalchemy.orm.Session",
          "sqlalchemy.exc.IntegrityError",
          "typing.List",
          "typing.Optional",
          "datetime.datetime",
          "datetime.timedelta",
          "uuid",
          "app.models.user_models.User",
          "app.models.user_models.UserSession",
          "app.schemas.user_schemas.UserCreate",
          "app.schemas.user_schemas.UserUpdate",
          "app.core.security.get_password_hash",
          "app.core.security.verify_password",
          "app.core.config.settings"
        ],
        "decorators": []
      },
      {
        "path": "/home/enabledrm/backend/app/services/auth_service.py",
        "classes": [
          "AuthService",
          "AuthenticationError"
        ],
        "functions": [
          "with_performance_logging",
          "with_caching",
          "decorator",
          "__init__",
          "_get_user_permissions",
          "__init__"
        ],
        "endpoints": [],
        "imports": [
          "logging",
          "time",
          "json",
          "typing.Optional",
          "typing.Dict",
          "typing.Any",
          "typing.Tuple",
          "datetime.datetime",
          "datetime.timedelta",
          "functools.wraps",
          "sqlalchemy.orm.Session",
          "app.core.cache.get_redis_client",
          "app.core.logging.get_structured_logger",
          "app.core.security.create_access_token",
          "app.core.security.create_refresh_token",
          "app.core.security.verify_token",
          "app.core.config.settings",
          "app.services.user_service.UserService",
          "app.domains.audit.services.audit_service.AuditService",
          "app.domains.audit.services.audit_service.AuditEventType",
          "app.domains.audit.services.audit_service.AuditSeverity"
        ],
        "decorators": []
      },
      {
        "path": "/home/enabledrm/backend/app/services/target_management_service.py",
        "classes": [
          "TargetManagementService",
          "TargetManagementError"
        ],
        "functions": [
          "with_performance_logging",
          "with_caching",
          "decorator",
          "__init__",
          "__init__"
        ],
        "endpoints": [],
        "imports": [
          "logging",
          "time",
          "json",
          "asyncio",
          "typing.Optional",
          "typing.Dict",
          "typing.Any",
          "typing.List",
          "typing.Tuple",
          "datetime.datetime",
          "datetime.timedelta",
          "functools.wraps",
          "sqlalchemy.orm.Session",
          "app.core.cache.get_redis_client",
          "app.core.logging.get_structured_logger",
          "app.core.config.settings",
          "app.services.universal_target_service.UniversalTargetService",
          "app.services.health_monitoring_service.HealthMonitoringService",
          "app.services.serial_service.SerialService",
          "app.domains.audit.services.audit_service.AuditService",
          "app.domains.audit.services.audit_service.AuditEventType",
          "app.domains.audit.services.audit_service.AuditSeverity",
          "app.schemas.target_schemas.TargetCreate",
          "app.schemas.target_schemas.TargetUpdate",
          "app.schemas.target_schemas.TargetComprehensiveUpdate",
          "app.schemas.target_schemas.CommunicationMethodCreate",
          "app.schemas.target_schemas.CommunicationMethodUpdate",
          "app.utils.target_utils.getTargetIpAddress"
        ],
        "decorators": []
      },
      {
        "path": "/home/enabledrm/backend/app/services/network_discovery_service.py",
        "classes": [
          "DiscoveredDevice",
          "DiscoveryConfig",
          "NetworkDiscoveryService"
        ],
        "functions": [
          "__init__",
          "_load_discovery_hints",
          "_generate_ip_list",
          "_classify_device",
          "_suggest_communication_methods"
        ],
        "endpoints": [],
        "imports": [
          "asyncio",
          "socket",
          "ipaddress",
          "logging",
          "typing.List",
          "typing.Dict",
          "typing.Optional",
          "typing.Set",
          "typing.Tuple",
          "typing.Any",
          "dataclasses.dataclass",
          "dataclasses.field",
          "datetime.datetime",
          "json",
          "ssl",
          "struct",
          "urllib.parse.urlparse",
          "pysnmp.hlapi.*",
          "aiohttp"
        ],
        "decorators": []
      },
      {
        "path": "/home/enabledrm/backend/app/services/user_management_service.py",
        "classes": [
          "UserManagementService",
          "UserManagementError"
        ],
        "functions": [
          "with_performance_logging",
          "with_caching",
          "decorator",
          "__init__",
          "_get_user_permissions",
          "__init__"
        ],
        "endpoints": [],
        "imports": [
          "logging",
          "time",
          "json",
          "typing.Optional",
          "typing.Dict",
          "typing.Any",
          "typing.List",
          "typing.Tuple",
          "datetime.datetime",
          "datetime.timedelta",
          "functools.wraps",
          "sqlalchemy.orm.Session",
          "app.core.cache.get_redis_client",
          "app.core.logging.get_structured_logger",
          "app.core.config.settings",
          "app.services.user_service.UserService",
          "app.domains.audit.services.audit_service.AuditService",
          "app.domains.audit.services.audit_service.AuditEventType",
          "app.domains.audit.services.audit_service.AuditSeverity",
          "app.schemas.user_schemas.UserCreate",
          "app.schemas.user_schemas.UserUpdate",
          "app.schemas.user_schemas.UserResponse"
        ],
        "decorators": []
      },
      {
        "path": "/home/enabledrm/backend/app/services/device_type_service.py",
        "classes": [
          "DeviceTypeService"
        ],
        "functions": [
          "with_caching",
          "with_performance_logging",
          "decorator",
          "__init__"
        ],
        "endpoints": [],
        "imports": [
          "logging",
          "time",
          "typing.List",
          "typing.Dict",
          "typing.Optional",
          "typing.Set",
          "functools.wraps",
          "json",
          "app.core.device_types.device_registry",
          "app.core.device_types.DeviceCategory",
          "app.core.device_types.DeviceType",
          "app.core.cache.get_redis_client",
          "app.core.logging.get_structured_logger"
        ],
        "decorators": []
      },
      {
        "path": "/home/enabledrm/backend/app/services/health_monitoring_service.py",
        "classes": [
          "HealthMonitoringService"
        ],
        "functions": [
          "__init__",
          "check_target_health",
          "_check_ssh_health",
          "_check_winrm_health",
          "_check_snmp_health",
          "_check_telnet_health",
          "_check_rest_api_health",
          "_check_smtp_health",
          "_get_primary_communication_method",
          "update_target_health_status",
          "_log_health_status_change",
          "get_targets_for_health_check",
          "run_health_check_batch"
        ],
        "endpoints": [],
        "imports": [
          "logging",
          "time",
          "datetime.datetime",
          "datetime.timedelta",
          "typing.Dict",
          "typing.Any",
          "typing.List",
          "typing.Optional",
          "typing.Tuple",
          "sqlalchemy.orm.Session",
          "sqlalchemy.and_",
          "sqlalchemy.or_",
          "app.models.universal_target_models.UniversalTarget",
          "app.models.universal_target_models.TargetCommunicationMethod",
          "app.utils.connection_test_utils.test_ssh_connection",
          "app.utils.connection_test_utils.test_winrm_connection",
          "app.utils.encryption_utils.decrypt_credentials",
          "app.config.health_monitoring.get_health_check_interval",
          "app.config.health_monitoring.get_health_check_timeout",
          "app.config.health_monitoring.should_escalate_to_warning",
          "app.config.health_monitoring.should_escalate_to_critical",
          "app.config.health_monitoring.should_recover_to_healthy",
          "app.config.health_monitoring.HEALTH_MONITORING_SETTINGS",
          "app.utils.connection_test_utils.test_smtp_health_only",
          "socket",
          "socket",
          "requests"
        ],
        "decorators": []
      },
      {
        "path": "/home/enabledrm/backend/app/services/celery_monitoring_service.py",
        "classes": [
          "CeleryMonitoringService"
        ],
        "functions": [
          "__init__",
          "record_task_completion",
          "get_recent_tasks",
          "get_task_statistics",
          "get_task_types_stats",
          "create_metrics_snapshot",
          "get_metrics_history",
          "cleanup_old_data",
          "get_enhanced_celery_stats"
        ],
        "endpoints": [],
        "imports": [
          "json",
          "logging",
          "datetime.datetime",
          "datetime.timezone",
          "datetime.timedelta",
          "typing.Dict",
          "typing.List",
          "typing.Any",
          "typing.Optional",
          "sqlalchemy.orm.Session",
          "sqlalchemy.func",
          "sqlalchemy.desc",
          "app.models.celery_models.CeleryTaskHistory",
          "app.models.celery_models.CeleryMetricsSnapshot",
          "app.core.celery_app.celery_app"
        ],
        "decorators": []
      }
    ],
    "backend_services": [],
    "duplicates": []
  },
  "models": [
    {
      "path": "/home/enabledrm/backend/app/models/system_models.py",
      "classes": [
        "SystemSetting",
        "TimezoneManager"
      ],
      "functions": [
        "__repr__",
        "get_system_timezone",
        "get_system_tzinfo",
        "get_dst_rules",
        "utc_to_local",
        "local_to_utc",
        "format_local_time",
        "get_timezone_display_name",
        "is_dst_active",
        "get_available_timezones"
      ],
      "endpoints": [],
      "imports": [
        "sqlalchemy.Column",
        "sqlalchemy.Integer",
        "sqlalchemy.String",
        "sqlalchemy.Text",
        "sqlalchemy.DateTime",
        "sqlalchemy.dialects.postgresql.JSONB",
        "sqlalchemy.sql.func",
        "datetime.datetime",
        "datetime.timezone",
        "pytz",
        "typing.Dict",
        "typing.Any",
        "app.database.database.Base"
      ],
      "decorators": []
    },
    {
      "path": "/home/enabledrm/backend/app/models/discovery_models.py",
      "classes": [
        "DiscoveryJob",
        "DiscoveredDevice",
        "DiscoveryTemplate",
        "DiscoverySchedule"
      ],
      "functions": [],
      "endpoints": [],
      "imports": [
        "sqlalchemy.Column",
        "sqlalchemy.Integer",
        "sqlalchemy.String",
        "sqlalchemy.Text",
        "sqlalchemy.DateTime",
        "sqlalchemy.Float",
        "sqlalchemy.Boolean",
        "sqlalchemy.JSON",
        "sqlalchemy.ForeignKey",
        "sqlalchemy.orm.relationship",
        "sqlalchemy.sql.func",
        "app.database.database.Base"
      ],
      "decorators": []
    },
    {
      "path": "/home/enabledrm/backend/app/models/job_schedule_models.py",
      "classes": [
        "ScheduleType",
        "RecurringType",
        "JobSchedule",
        "ScheduleExecution"
      ],
      "functions": [
        "__repr__",
        "__repr__"
      ],
      "endpoints": [],
      "imports": [
        "sqlalchemy.Column",
        "sqlalchemy.Integer",
        "sqlalchemy.String",
        "sqlalchemy.DateTime",
        "sqlalchemy.Boolean",
        "sqlalchemy.Text",
        "sqlalchemy.ForeignKey",
        "sqlalchemy.func",
        "sqlalchemy.Enum",
        "sqlalchemy.text",
        "sqlalchemy.orm.relationship",
        "sqlalchemy.dialects.postgresql.UUID",
        "sqlalchemy.dialects.postgresql.JSONB",
        "datetime.datetime",
        "datetime.timezone",
        "uuid",
        "enum",
        "app.database.database.Base"
      ],
      "decorators": []
    },
    {
      "path": "/home/enabledrm/backend/app/models/notification_models.py",
      "classes": [
        "NotificationTemplate",
        "NotificationLog",
        "AlertRule",
        "AlertLog"
      ],
      "functions": [
        "__repr__",
        "__repr__",
        "__repr__",
        "__repr__"
      ],
      "endpoints": [],
      "imports": [
        "sqlalchemy.Column",
        "sqlalchemy.Integer",
        "sqlalchemy.String",
        "sqlalchemy.Text",
        "sqlalchemy.JSON",
        "sqlalchemy.DateTime",
        "sqlalchemy.Boolean",
        "sqlalchemy.ForeignKey",
        "sqlalchemy.Enum",
        "sqlalchemy.text",
        "sqlalchemy.Float",
        "sqlalchemy.dialects.postgresql.UUID",
        "sqlalchemy.dialects.postgresql.JSONB",
        "sqlalchemy.sql.func",
        "sqlalchemy.orm.relationship",
        "database.database.Base"
      ],
      "decorators": []
    },
    {
      "path": "/home/enabledrm/backend/app/models/celery_models.py",
      "classes": [
        "CeleryTaskHistory",
        "CeleryMetricsSnapshot"
      ],
      "functions": [
        "__repr__",
        "__repr__"
      ],
      "endpoints": [],
      "imports": [
        "sqlalchemy.Column",
        "sqlalchemy.Integer",
        "sqlalchemy.String",
        "sqlalchemy.DateTime",
        "sqlalchemy.Float",
        "sqlalchemy.Text",
        "sqlalchemy.Boolean",
        "sqlalchemy.text",
        "sqlalchemy.Enum",
        "sqlalchemy.dialects.postgresql.UUID",
        "sqlalchemy.dialects.postgresql.JSONB",
        "datetime.datetime",
        "datetime.timezone",
        "app.database.database.Base"
      ],
      "decorators": []
    },
    {
      "path": "/home/enabledrm/backend/app/models/job_models.py",
      "classes": [
        "JobType",
        "JobStatus",
        "ExecutionStatus",
        "ActionType",
        "LogPhase",
        "LogLevel",
        "LogCategory",
        "Job",
        "JobTarget",
        "JobAction",
        "JobExecution",
        "JobExecutionBranch",
        "JobActionResult",
        "JobExecutionLog"
      ],
      "functions": [],
      "endpoints": [],
      "imports": [
        "sqlalchemy.Column",
        "sqlalchemy.Integer",
        "sqlalchemy.String",
        "sqlalchemy.Text",
        "sqlalchemy.DateTime",
        "sqlalchemy.JSON",
        "sqlalchemy.ForeignKey",
        "sqlalchemy.Enum",
        "sqlalchemy.Boolean",
        "sqlalchemy.orm.relationship",
        "sqlalchemy.sql.func",
        "sqlalchemy.dialects.postgresql.UUID",
        "app.database.database.Base",
        "enum",
        "uuid"
      ],
      "decorators": []
    },
    {
      "path": "/home/enabledrm/backend/app/models/analytics_models.py",
      "classes": [
        "MetricType",
        "AggregationPeriod",
        "PerformanceMetric",
        "SystemHealthSnapshot",
        "AnalyticsAlertRule",
        "ReportTemplate",
        "GeneratedReport"
      ],
      "functions": [],
      "endpoints": [],
      "imports": [
        "sqlalchemy.Column",
        "sqlalchemy.Integer",
        "sqlalchemy.String",
        "sqlalchemy.DateTime",
        "sqlalchemy.Float",
        "sqlalchemy.ForeignKey",
        "sqlalchemy.Index",
        "sqlalchemy.dialects.postgresql.JSONB",
        "sqlalchemy.orm.relationship",
        "sqlalchemy.sql.func",
        "app.database.database.Base",
        "enum"
      ],
      "decorators": []
    },
    {
      "path": "/home/enabledrm/backend/app/models/device_type_models.py",
      "classes": [
        "DeviceTypeModel",
        "DeviceTypeCategoryModel",
        "DeviceTypeTemplateModel",
        "DeviceTypeUsageModel"
      ],
      "functions": [
        "to_dict",
        "update_search_vector",
        "to_dict",
        "to_dict",
        "to_dict"
      ],
      "endpoints": [],
      "imports": [
        "sqlalchemy.Column",
        "sqlalchemy.Integer",
        "sqlalchemy.String",
        "sqlalchemy.Text",
        "sqlalchemy.DateTime",
        "sqlalchemy.Boolean",
        "sqlalchemy.ForeignKey",
        "sqlalchemy.JSON",
        "sqlalchemy.orm.relationship",
        "sqlalchemy.sql.func",
        "app.database.database.Base",
        "typing.List",
        "typing.Dict",
        "typing.Optional",
        "json"
      ],
      "decorators": []
    },
    {
      "path": "/home/enabledrm/backend/app/models/user_models.py",
      "classes": [
        "User",
        "UserSession"
      ],
      "functions": [],
      "endpoints": [],
      "imports": [
        "sqlalchemy.Column",
        "sqlalchemy.Integer",
        "sqlalchemy.String",
        "sqlalchemy.Boolean",
        "sqlalchemy.DateTime",
        "sqlalchemy.Text",
        "sqlalchemy.orm.relationship",
        "sqlalchemy.sql.func",
        "app.database.database.Base"
      ],
      "decorators": []
    },
    {
      "path": "/home/enabledrm/backend/app/models/universal_target_models.py",
      "classes": [
        "UniversalTarget",
        "TargetCommunicationMethod",
        "TargetCredential"
      ],
      "functions": [],
      "endpoints": [],
      "imports": [
        "sqlalchemy.Column",
        "sqlalchemy.Integer",
        "sqlalchemy.String",
        "sqlalchemy.Boolean",
        "sqlalchemy.DateTime",
        "sqlalchemy.Text",
        "sqlalchemy.ForeignKey",
        "sqlalchemy.UniqueConstraint",
        "sqlalchemy.orm.relationship",
        "sqlalchemy.sql.func",
        "sqlalchemy.dialects.postgresql.UUID",
        "sqlalchemy.dialects.postgresql.JSONB",
        "app.database.database.Base",
        "uuid"
      ],
      "decorators": []
    }
  ],
  "schemas": [
    {
      "path": "/home/enabledrm/backend/app/schemas/notification_schemas.py",
      "classes": [
        "NotificationType",
        "AlertSeverity",
        "AlertType",
        "NotificationStatus",
        "NotificationTemplateBase",
        "NotificationTemplateCreate",
        "NotificationTemplateUpdate",
        "NotificationTemplateResponse",
        "EmailSendRequest",
        "EmailSendResponse",
        "EmailTargetConfigRequest",
        "EmailTargetConfigResponse",
        "EligibleEmailTarget",
        "AlertRuleBase",
        "AlertRuleCreate",
        "AlertRuleUpdate",
        "AlertRuleResponse",
        "AlertCreateRequest",
        "AlertResponse",
        "AlertResolveRequest",
        "NotificationLogResponse",
        "NotificationLogFilter",
        "AlertLogFilter",
        "NotificationStats",
        "TestEmailRequest",
        "TestEmailResponse",
        "Config",
        "Config",
        "Config",
        "Config"
      ],
      "functions": [
        "validate_emails",
        "validate_target_id",
        "validate_recipients"
      ],
      "endpoints": [],
      "imports": [
        "pydantic.BaseModel",
        "pydantic.EmailStr",
        "pydantic.validator",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Union",
        "datetime.datetime",
        "enum.Enum"
      ],
      "decorators": []
    },
    {
      "path": "/home/enabledrm/backend/app/schemas/user_schemas.py",
      "classes": [
        "UserBase",
        "UserCreate",
        "UserUpdate",
        "UserResponse",
        "UserLogin",
        "PasswordChange",
        "Token",
        "TokenData",
        "UserSessionResponse",
        "Config",
        "Config"
      ],
      "functions": [],
      "endpoints": [],
      "imports": [
        "pydantic.BaseModel",
        "pydantic.EmailStr",
        "typing.Optional",
        "datetime.datetime"
      ],
      "decorators": []
    },
    {
      "path": "/home/enabledrm/backend/app/schemas/discovery_schemas.py",
      "classes": [
        "DiscoveryJobStatus",
        "DiscoveredDeviceStatus",
        "DiscoveryConfigBase",
        "DiscoveryJobCreate",
        "DiscoveryJobUpdate",
        "DiscoveredDeviceInfo",
        "DiscoveredDeviceResponse",
        "DiscoveryJobResponse",
        "DiscoveryJobSummary",
        "DiscoveryTemplateCreate",
        "DiscoveryTemplateUpdate",
        "DiscoveryTemplateResponse",
        "DeviceTargetConfig",
        "BulkDeviceImportRequest",
        "DeviceImportRequest",
        "DeviceImportResponse",
        "DiscoveryStatsResponse",
        "NetworkScanRequest",
        "NetworkScanResponse",
        "Config",
        "Config",
        "Config",
        "Config"
      ],
      "functions": [
        "validate_network_ranges",
        "validate_port_ranges",
        "validate_common_ports",
        "validate_network_range"
      ],
      "endpoints": [],
      "imports": [
        "typing.List",
        "typing.Dict",
        "typing.Optional",
        "typing.Any",
        "typing.Tuple",
        "datetime.datetime",
        "pydantic.BaseModel",
        "pydantic.Field",
        "pydantic.validator",
        "enum.Enum",
        "ipaddress",
        "ipaddress"
      ],
      "decorators": []
    },
    {
      "path": "/home/enabledrm/backend/app/schemas/target_schemas.py",
      "classes": [
        "TargetCredentialBase",
        "TargetCredentialResponse",
        "CommunicationMethodBase",
        "CommunicationMethodResponse",
        "CommunicationMethodCreate",
        "CommunicationMethodUpdate",
        "TargetBase",
        "TargetCreate",
        "TargetUpdate",
        "CommunicationMethodUpdateData",
        "TargetComprehensiveUpdate",
        "TargetResponse",
        "TargetSummary",
        "ConnectionTestResult",
        "ErrorResponse",
        "BulkTargetOperation",
        "TargetStatistics",
        "Config",
        "Config",
        "Config"
      ],
      "functions": [
        "validate_os_type",
        "validate_environment",
        "validate_status",
        "validate_method_type",
        "validate_ip_address",
        "validate_credentials",
        "validate_os_type",
        "validate_environment",
        "validate_status",
        "validate_os_type",
        "validate_environment",
        "validate_status",
        "validate_method_type",
        "validate_ip_address"
      ],
      "endpoints": [],
      "imports": [
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Union",
        "datetime.datetime",
        "uuid.UUID",
        "pydantic.BaseModel",
        "pydantic.Field",
        "pydantic.validator",
        "app.core.device_types.get_valid_device_types",
        "ipaddress",
        "re",
        "app.core.device_types.get_valid_device_types",
        "ipaddress",
        "re"
      ],
      "decorators": []
    },
    {
      "path": "/home/enabledrm/backend/app/schemas/job_schemas.py",
      "classes": [
        "JobActionCreate",
        "JobCreate",
        "JobSchedule",
        "JobActionResponse",
        "JobResponse",
        "JobExecutionBranchResponse",
        "JobExecutionResponse",
        "JobExecutionLogResponse",
        "JobWithExecutionsResponse",
        "JobListItem",
        "JobListResponse",
        "JobExecuteRequest",
        "JobExecutionStatus",
        "JobActionResultResponse",
        "JobNotificationRequest",
        "Config",
        "Config",
        "Config",
        "Config",
        "Config",
        "Config",
        "Config",
        "Config"
      ],
      "functions": [
        "convert_uuid_to_string",
        "convert_branch_uuid_to_string",
        "convert_execution_uuid_to_string",
        "convert_job_uuid_to_string"
      ],
      "endpoints": [],
      "imports": [
        "pydantic.BaseModel",
        "pydantic.Field",
        "pydantic.field_validator",
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "datetime.datetime",
        "uuid",
        "app.models.job_models.JobType",
        "app.models.job_models.JobStatus",
        "app.models.job_models.ExecutionStatus",
        "app.models.job_models.ActionType",
        "app.models.job_models.LogPhase",
        "app.models.job_models.LogLevel",
        "app.models.job_models.LogCategory"
      ],
      "decorators": []
    }
  ],
  "duplications": [],
  "recommendations": [
    {
      "category": "V1 APIs",
      "priority": "MEDIUM",
      "description": "Found 1 V1 API files that could be migrated to V2",
      "action": "Review V1 APIs for migration to V2 or deprecation",
      "files_affected": [
        "/home/enabledrm/backend/app/api/v1/celery_monitor.py"
      ]
    },
    {
      "category": "API Consolidation Status",
      "priority": "INFO",
      "description": "Total endpoints: 41 across 20 files",
      "action": "V2 APIs: 11 files, V1 APIs: 1 files, Routers: 8 files, Legacy: 0 files",
      "files_affected": []
    }
  ]
}